// employee.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: employee_schedule.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmployeeScheduleService_CreateEmployeeSchedule_FullMethodName = "/EmployeeScheduleService/CreateEmployeeSchedule"
	EmployeeScheduleService_ListEmployeeSchedule_FullMethodName   = "/EmployeeScheduleService/ListEmployeeSchedule"
	EmployeeScheduleService_ActiveEmployeeSchedule_FullMethodName = "/EmployeeScheduleService/ActiveEmployeeSchedule"
	EmployeeScheduleService_PrevEmployeeSchedule_FullMethodName   = "/EmployeeScheduleService/PrevEmployeeSchedule"
	EmployeeScheduleService_GetEmployeeSchedule_FullMethodName    = "/EmployeeScheduleService/GetEmployeeSchedule"
	EmployeeScheduleService_UpdateEmployeeSchedule_FullMethodName = "/EmployeeScheduleService/UpdateEmployeeSchedule"
	EmployeeScheduleService_DeleteEmployeeSchedule_FullMethodName = "/EmployeeScheduleService/DeleteEmployeeSchedule"
)

// EmployeeScheduleServiceClient is the client API for EmployeeScheduleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeeScheduleServiceClient interface {
	CreateEmployeeSchedule(ctx context.Context, in *CreateEmployeeScheduleRequest, opts ...grpc.CallOption) (*EmployeeSchedule, error)
	ListEmployeeSchedule(ctx context.Context, in *ListEmployeeScheduleRequest, opts ...grpc.CallOption) (*ListEmployeeScheduleResponse, error)
	ActiveEmployeeSchedule(ctx context.Context, in *ActiveEmployeeScheduleRequest, opts ...grpc.CallOption) (*EmployeeSchedule, error)
	PrevEmployeeSchedule(ctx context.Context, in *PrevEmployeeScheduleRequest, opts ...grpc.CallOption) (*EmployeeSchedule, error)
	GetEmployeeSchedule(ctx context.Context, in *GetEmployeeScheduleRequest, opts ...grpc.CallOption) (*EmployeeSchedule, error)
	UpdateEmployeeSchedule(ctx context.Context, in *UpdateEmployeeScheduleRequest, opts ...grpc.CallOption) (*EmployeeSchedule, error)
	DeleteEmployeeSchedule(ctx context.Context, in *DeleteEmployeeScheduleRequest, opts ...grpc.CallOption) (*EmployeeSchedule, error)
}

type employeeScheduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeeScheduleServiceClient(cc grpc.ClientConnInterface) EmployeeScheduleServiceClient {
	return &employeeScheduleServiceClient{cc}
}

func (c *employeeScheduleServiceClient) CreateEmployeeSchedule(ctx context.Context, in *CreateEmployeeScheduleRequest, opts ...grpc.CallOption) (*EmployeeSchedule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployeeSchedule)
	err := c.cc.Invoke(ctx, EmployeeScheduleService_CreateEmployeeSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeScheduleServiceClient) ListEmployeeSchedule(ctx context.Context, in *ListEmployeeScheduleRequest, opts ...grpc.CallOption) (*ListEmployeeScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEmployeeScheduleResponse)
	err := c.cc.Invoke(ctx, EmployeeScheduleService_ListEmployeeSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeScheduleServiceClient) ActiveEmployeeSchedule(ctx context.Context, in *ActiveEmployeeScheduleRequest, opts ...grpc.CallOption) (*EmployeeSchedule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployeeSchedule)
	err := c.cc.Invoke(ctx, EmployeeScheduleService_ActiveEmployeeSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeScheduleServiceClient) PrevEmployeeSchedule(ctx context.Context, in *PrevEmployeeScheduleRequest, opts ...grpc.CallOption) (*EmployeeSchedule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployeeSchedule)
	err := c.cc.Invoke(ctx, EmployeeScheduleService_PrevEmployeeSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeScheduleServiceClient) GetEmployeeSchedule(ctx context.Context, in *GetEmployeeScheduleRequest, opts ...grpc.CallOption) (*EmployeeSchedule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployeeSchedule)
	err := c.cc.Invoke(ctx, EmployeeScheduleService_GetEmployeeSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeScheduleServiceClient) UpdateEmployeeSchedule(ctx context.Context, in *UpdateEmployeeScheduleRequest, opts ...grpc.CallOption) (*EmployeeSchedule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployeeSchedule)
	err := c.cc.Invoke(ctx, EmployeeScheduleService_UpdateEmployeeSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeScheduleServiceClient) DeleteEmployeeSchedule(ctx context.Context, in *DeleteEmployeeScheduleRequest, opts ...grpc.CallOption) (*EmployeeSchedule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployeeSchedule)
	err := c.cc.Invoke(ctx, EmployeeScheduleService_DeleteEmployeeSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeScheduleServiceServer is the server API for EmployeeScheduleService service.
// All implementations must embed UnimplementedEmployeeScheduleServiceServer
// for forward compatibility.
type EmployeeScheduleServiceServer interface {
	CreateEmployeeSchedule(context.Context, *CreateEmployeeScheduleRequest) (*EmployeeSchedule, error)
	ListEmployeeSchedule(context.Context, *ListEmployeeScheduleRequest) (*ListEmployeeScheduleResponse, error)
	ActiveEmployeeSchedule(context.Context, *ActiveEmployeeScheduleRequest) (*EmployeeSchedule, error)
	PrevEmployeeSchedule(context.Context, *PrevEmployeeScheduleRequest) (*EmployeeSchedule, error)
	GetEmployeeSchedule(context.Context, *GetEmployeeScheduleRequest) (*EmployeeSchedule, error)
	UpdateEmployeeSchedule(context.Context, *UpdateEmployeeScheduleRequest) (*EmployeeSchedule, error)
	DeleteEmployeeSchedule(context.Context, *DeleteEmployeeScheduleRequest) (*EmployeeSchedule, error)
	mustEmbedUnimplementedEmployeeScheduleServiceServer()
}

// UnimplementedEmployeeScheduleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmployeeScheduleServiceServer struct{}

func (UnimplementedEmployeeScheduleServiceServer) CreateEmployeeSchedule(context.Context, *CreateEmployeeScheduleRequest) (*EmployeeSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmployeeSchedule not implemented")
}
func (UnimplementedEmployeeScheduleServiceServer) ListEmployeeSchedule(context.Context, *ListEmployeeScheduleRequest) (*ListEmployeeScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmployeeSchedule not implemented")
}
func (UnimplementedEmployeeScheduleServiceServer) ActiveEmployeeSchedule(context.Context, *ActiveEmployeeScheduleRequest) (*EmployeeSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveEmployeeSchedule not implemented")
}
func (UnimplementedEmployeeScheduleServiceServer) PrevEmployeeSchedule(context.Context, *PrevEmployeeScheduleRequest) (*EmployeeSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrevEmployeeSchedule not implemented")
}
func (UnimplementedEmployeeScheduleServiceServer) GetEmployeeSchedule(context.Context, *GetEmployeeScheduleRequest) (*EmployeeSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeSchedule not implemented")
}
func (UnimplementedEmployeeScheduleServiceServer) UpdateEmployeeSchedule(context.Context, *UpdateEmployeeScheduleRequest) (*EmployeeSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployeeSchedule not implemented")
}
func (UnimplementedEmployeeScheduleServiceServer) DeleteEmployeeSchedule(context.Context, *DeleteEmployeeScheduleRequest) (*EmployeeSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmployeeSchedule not implemented")
}
func (UnimplementedEmployeeScheduleServiceServer) mustEmbedUnimplementedEmployeeScheduleServiceServer() {
}
func (UnimplementedEmployeeScheduleServiceServer) testEmbeddedByValue() {}

// UnsafeEmployeeScheduleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeeScheduleServiceServer will
// result in compilation errors.
type UnsafeEmployeeScheduleServiceServer interface {
	mustEmbedUnimplementedEmployeeScheduleServiceServer()
}

func RegisterEmployeeScheduleServiceServer(s grpc.ServiceRegistrar, srv EmployeeScheduleServiceServer) {
	// If the following call pancis, it indicates UnimplementedEmployeeScheduleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmployeeScheduleService_ServiceDesc, srv)
}

func _EmployeeScheduleService_CreateEmployeeSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmployeeScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeScheduleServiceServer).CreateEmployeeSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeScheduleService_CreateEmployeeSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeScheduleServiceServer).CreateEmployeeSchedule(ctx, req.(*CreateEmployeeScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeScheduleService_ListEmployeeSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmployeeScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeScheduleServiceServer).ListEmployeeSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeScheduleService_ListEmployeeSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeScheduleServiceServer).ListEmployeeSchedule(ctx, req.(*ListEmployeeScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeScheduleService_ActiveEmployeeSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActiveEmployeeScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeScheduleServiceServer).ActiveEmployeeSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeScheduleService_ActiveEmployeeSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeScheduleServiceServer).ActiveEmployeeSchedule(ctx, req.(*ActiveEmployeeScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeScheduleService_PrevEmployeeSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrevEmployeeScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeScheduleServiceServer).PrevEmployeeSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeScheduleService_PrevEmployeeSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeScheduleServiceServer).PrevEmployeeSchedule(ctx, req.(*PrevEmployeeScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeScheduleService_GetEmployeeSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeScheduleServiceServer).GetEmployeeSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeScheduleService_GetEmployeeSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeScheduleServiceServer).GetEmployeeSchedule(ctx, req.(*GetEmployeeScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeScheduleService_UpdateEmployeeSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmployeeScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeScheduleServiceServer).UpdateEmployeeSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeScheduleService_UpdateEmployeeSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeScheduleServiceServer).UpdateEmployeeSchedule(ctx, req.(*UpdateEmployeeScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeScheduleService_DeleteEmployeeSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmployeeScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeScheduleServiceServer).DeleteEmployeeSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeScheduleService_DeleteEmployeeSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeScheduleServiceServer).DeleteEmployeeSchedule(ctx, req.(*DeleteEmployeeScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeeScheduleService_ServiceDesc is the grpc.ServiceDesc for EmployeeScheduleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeeScheduleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EmployeeScheduleService",
	HandlerType: (*EmployeeScheduleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEmployeeSchedule",
			Handler:    _EmployeeScheduleService_CreateEmployeeSchedule_Handler,
		},
		{
			MethodName: "ListEmployeeSchedule",
			Handler:    _EmployeeScheduleService_ListEmployeeSchedule_Handler,
		},
		{
			MethodName: "ActiveEmployeeSchedule",
			Handler:    _EmployeeScheduleService_ActiveEmployeeSchedule_Handler,
		},
		{
			MethodName: "PrevEmployeeSchedule",
			Handler:    _EmployeeScheduleService_PrevEmployeeSchedule_Handler,
		},
		{
			MethodName: "GetEmployeeSchedule",
			Handler:    _EmployeeScheduleService_GetEmployeeSchedule_Handler,
		},
		{
			MethodName: "UpdateEmployeeSchedule",
			Handler:    _EmployeeScheduleService_UpdateEmployeeSchedule_Handler,
		},
		{
			MethodName: "DeleteEmployeeSchedule",
			Handler:    _EmployeeScheduleService_DeleteEmployeeSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "employee_schedule.proto",
}
