// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countUsers = `-- name: CountUsers :one
SELECT
    COUNT(*) AS "count"
FROM
    "user"
    LEFT JOIN "parent" ON "user"."id" = "parent"."user_id"
    LEFT JOIN "employee" ON "user"."id" = "employee"."user_id"
WHERE
    (
        $1 :: text IS NULL
        OR "username" ILIKE '%' || $1 || '%'
    )
    AND (
        $2 :: role_type  IS NULL
        OR "role" = $2 :: role_type
    )
    AND (
        $3 :: boolean IS NULL
        OR (
            $3 = TRUE
            AND (
                parent.id IS NOT NULL
                OR employee.id IS NOT NULL
            )
        )
        OR (
            $3 = FALSE
            AND parent.id IS NULL
            AND employee.id IS NULL
        )
    )
`

type CountUsersParams struct {
	Q        pgtype.Text  `db:"q"`
	Role     NullRoleType `db:"role"`
	HasOwner pgtype.Bool  `db:"has_owner"`
}

func (q *Queries) CountUsers(ctx context.Context, arg CountUsersParams) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers, arg.Q, arg.Role, arg.HasOwner)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO
    "user" ("role","email", "username", "password")
VALUES
    (
        $1 :: role_type,
        $2 :: text,
        $3 :: text,
        $4 :: text
    ) RETURNING id, role, email, username, password
`

type CreateUserParams struct {
	Role     RoleType `db:"role"`
	Email    string   `db:"email"`
	Username string   `db:"username"`
	Password string   `db:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Role,
		arg.Email,
		arg.Username,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Email,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM
    "user"
WHERE
    "id" = $1 RETURNING id, role, email, username, password
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Email,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    "user".id, "user".role, "user".email, "user".username, "user".password,
    CASE
        WHEN "parent"."id" IS NOT NULL THEN "parent"."id"
        WHEN "employee"."id" IS NOT NULL THEN "employee"."id"
        ELSE NULL
    END AS "owner_id"
FROM
    "user"
LEFT JOIN "parent" ON "user"."id" = "parent"."user_id"
LEFT JOIN "employee" ON "user"."id" = "employee"."user_id"
WHERE
    (
        $1::text IS NOT NULL
        AND "user"."email" = $1::text
    )
LIMIT
    1
`

type GetUserByEmailRow struct {
	ID       int32        `db:"id"`
	Role     NullRoleType `db:"role"`
	Email    pgtype.Text  `db:"email"`
	Username pgtype.Text  `db:"username"`
	Password pgtype.Text  `db:"password"`
	OwnerID  interface{}  `db:"owner_id"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.OwnerID,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT
    "user".id, "user".role, "user".email, "user".username, "user".password,
    CASE
        WHEN "parent"."id" IS NOT NULL THEN "parent"."id"
        WHEN "employee"."id" IS NOT NULL THEN "employee"."id"
        ELSE NULL
    END AS "owner_id"
FROM
    "user"
LEFT JOIN "parent" ON "user"."id" = "parent"."user_id"
LEFT JOIN "employee" ON "user"."id" = "employee"."user_id"
WHERE
    (
        $1::integer IS NOT NULL
        AND "user"."id" = $1::integer
    )
LIMIT
    1
`

type GetUserByIdRow struct {
	ID       int32        `db:"id"`
	Role     NullRoleType `db:"role"`
	Email    pgtype.Text  `db:"email"`
	Username pgtype.Text  `db:"username"`
	Password pgtype.Text  `db:"password"`
	OwnerID  interface{}  `db:"owner_id"`
}

func (q *Queries) GetUserById(ctx context.Context, id pgtype.Int4) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.OwnerID,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT
    "user".id, "user".role, "user".email, "user".username, "user".password,
    CASE
        WHEN "parent"."id" IS NOT NULL THEN "parent"."id"
        WHEN "employee"."id" IS NOT NULL THEN "employee"."id"
        ELSE NULL
    END AS "owner_id"
FROM
    "user"
LEFT JOIN "parent" ON "user"."id" = "parent"."user_id"
LEFT JOIN "employee" ON "user"."id" = "employee"."user_id"
WHERE
    (
        $1::text IS NOT NULL
        AND "user"."username" = $1::text
    )
LIMIT
    1
`

type GetUserByUsernameRow struct {
	ID       int32        `db:"id"`
	Role     NullRoleType `db:"role"`
	Email    pgtype.Text  `db:"email"`
	Username pgtype.Text  `db:"username"`
	Password pgtype.Text  `db:"password"`
	OwnerID  interface{}  `db:"owner_id"`
}

func (q *Queries) GetUserByUsername(ctx context.Context, username pgtype.Text) (GetUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.OwnerID,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE
    "user"
SET
    "role" = COALESCE($1::role_type, "role"),
    "email" = COALESCE($2, "email"),
    "username" = COALESCE($3, "username"),
    "password" = COALESCE($4, "password")
WHERE
    "id" = $5 RETURNING id, role, email, username, password
`

type UpdateUserParams struct {
	Role     NullRoleType `db:"role"`
	Email    pgtype.Text  `db:"email"`
	Username pgtype.Text  `db:"username"`
	Password pgtype.Text  `db:"password"`
	ID       int32        `db:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Role,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Email,
		&i.Username,
		&i.Password,
	)
	return i, err
}
