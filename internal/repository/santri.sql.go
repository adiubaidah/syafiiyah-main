// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: santri.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countSantri = `-- name: CountSantri :one
SELECT
    COUNT(*) AS "count"
FROM
    "santri"
    LEFT JOIN "parent" ON "santri".parent_id = "parent".id
    LEFT JOIN santri_occupation ON "santri".occupation_id = santri_occupation.id
WHERE
    (
        $1 :: text IS NULL
        OR "santri".name ILIKE '%' || $1 :: text || '%'
        OR "santri".nis ILIKE '%' || $1 :: text || '%'
    )
    AND (
        $2 :: integer IS NULL
        OR "santri".occupation_id = $2
    )
    AND (
        $3 :: integer IS NULL
        OR "santri".generation = $3
    )
    AND (
        $4 :: boolean IS NULL
        OR "santri".is_active = $4 :: boolean
    )
`

type CountSantriParams struct {
	Q            pgtype.Text `db:"q"`
	OccupationID pgtype.Int4 `db:"occupation_id"`
	Generation   pgtype.Int4 `db:"generation"`
	IsActive     pgtype.Bool `db:"is_active"`
}

func (q *Queries) CountSantri(ctx context.Context, arg CountSantriParams) (int64, error) {
	row := q.db.QueryRow(ctx, countSantri,
		arg.Q,
		arg.OccupationID,
		arg.Generation,
		arg.IsActive,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSantri = `-- name: CreateSantri :one
INSERT INTO
    "santri" (
        "nis",
        "name",
        "gender",
        "is_active",
        "generation",
        "photo",
        "occupation_id",
        "parent_id"
    )
VALUES
    (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6 :: text,
        $7,
        $8
    ) RETURNING id, nis, name, gender, generation, is_active, photo, occupation_id, parent_id
`

type CreateSantriParams struct {
	Nis          pgtype.Text `db:"nis"`
	Name         string      `db:"name"`
	Gender       GenderType  `db:"gender"`
	IsActive     pgtype.Bool `db:"is_active"`
	Generation   int32       `db:"generation"`
	Photo        pgtype.Text `db:"photo"`
	OccupationID pgtype.Int4 `db:"occupation_id"`
	ParentID     pgtype.Int4 `db:"parent_id"`
}

func (q *Queries) CreateSantri(ctx context.Context, arg CreateSantriParams) (Santri, error) {
	row := q.db.QueryRow(ctx, createSantri,
		arg.Nis,
		arg.Name,
		arg.Gender,
		arg.IsActive,
		arg.Generation,
		arg.Photo,
		arg.OccupationID,
		arg.ParentID,
	)
	var i Santri
	err := row.Scan(
		&i.ID,
		&i.Nis,
		&i.Name,
		&i.Gender,
		&i.Generation,
		&i.IsActive,
		&i.Photo,
		&i.OccupationID,
		&i.ParentID,
	)
	return i, err
}

const deleteSantri = `-- name: DeleteSantri :one
DELETE FROM
    "santri"
WHERE
    "id" = $1 RETURNING id, nis, name, gender, generation, is_active, photo, occupation_id, parent_id
`

func (q *Queries) DeleteSantri(ctx context.Context, id int32) (Santri, error) {
	row := q.db.QueryRow(ctx, deleteSantri, id)
	var i Santri
	err := row.Scan(
		&i.ID,
		&i.Nis,
		&i.Name,
		&i.Gender,
		&i.Generation,
		&i.IsActive,
		&i.Photo,
		&i.OccupationID,
		&i.ParentID,
	)
	return i, err
}

const getSantri = `-- name: GetSantri :one
SELECT
    santri.id, santri.nis, santri.name, santri.gender, santri.generation, santri.is_active, santri.photo, santri.occupation_id, santri.parent_id,
    "parent"."id" AS "parent_id",
    "parent"."name" AS "parent_name",
    "parent"."whatsapp_number" AS "parent_whatsapp_number",
    "parent"."address" AS "parent_address",
    "santri_occupation"."name" AS "occupation_name"
FROM
    "santri"
    LEFT JOIN "parent" ON "santri"."parent_id" = "parent"."id"
    LEFT JOIN "santri_occupation" ON "santri"."occupation_id" = "santri_occupation"."id"
WHERE
    "santri"."id" = $1
`

type GetSantriRow struct {
	ID                   int32       `db:"id"`
	Nis                  pgtype.Text `db:"nis"`
	Name                 string      `db:"name"`
	Gender               GenderType  `db:"gender"`
	Generation           int32       `db:"generation"`
	IsActive             pgtype.Bool `db:"is_active"`
	Photo                pgtype.Text `db:"photo"`
	OccupationID         pgtype.Int4 `db:"occupation_id"`
	ParentID             pgtype.Int4 `db:"parent_id"`
	ParentID_2           pgtype.Int4 `db:"parent_id_2"`
	ParentName           pgtype.Text `db:"parent_name"`
	ParentWhatsappNumber pgtype.Text `db:"parent_whatsapp_number"`
	ParentAddress        pgtype.Text `db:"parent_address"`
	OccupationName       pgtype.Text `db:"occupation_name"`
}

func (q *Queries) GetSantri(ctx context.Context, id int32) (GetSantriRow, error) {
	row := q.db.QueryRow(ctx, getSantri, id)
	var i GetSantriRow
	err := row.Scan(
		&i.ID,
		&i.Nis,
		&i.Name,
		&i.Gender,
		&i.Generation,
		&i.IsActive,
		&i.Photo,
		&i.OccupationID,
		&i.ParentID,
		&i.ParentID_2,
		&i.ParentName,
		&i.ParentWhatsappNumber,
		&i.ParentAddress,
		&i.OccupationName,
	)
	return i, err
}

const updateSantri = `-- name: UpdateSantri :one
UPDATE
    "santri"
SET
    "nis" = $1,
    "name" = COALESCE($2, name),
    "generation" = COALESCE($3, generation),
    "is_active" = COALESCE($4 :: boolean, is_active),
    "gender" = COALESCE($5::gender_type, gender),
    "photo" = COALESCE($6, photo),
    "occupation_id"= $7,
    "parent_id" = $8
WHERE
    "id" = $9 RETURNING id, nis, name, gender, generation, is_active, photo, occupation_id, parent_id
`

type UpdateSantriParams struct {
	Nis          pgtype.Text    `db:"nis"`
	Name         pgtype.Text    `db:"name"`
	Generation   pgtype.Int4    `db:"generation"`
	IsActive     pgtype.Bool    `db:"is_active"`
	Gender       NullGenderType `db:"gender"`
	Photo        pgtype.Text    `db:"photo"`
	OccupationID pgtype.Int4    `db:"occupation_id"`
	ParentID     pgtype.Int4    `db:"parent_id"`
	ID           int32          `db:"id"`
}

func (q *Queries) UpdateSantri(ctx context.Context, arg UpdateSantriParams) (Santri, error) {
	row := q.db.QueryRow(ctx, updateSantri,
		arg.Nis,
		arg.Name,
		arg.Generation,
		arg.IsActive,
		arg.Gender,
		arg.Photo,
		arg.OccupationID,
		arg.ParentID,
		arg.ID,
	)
	var i Santri
	err := row.Scan(
		&i.ID,
		&i.Nis,
		&i.Name,
		&i.Gender,
		&i.Generation,
		&i.IsActive,
		&i.Photo,
		&i.OccupationID,
		&i.ParentID,
	)
	return i, err
}
