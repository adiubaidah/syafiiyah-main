// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: copyfrom.go

package repository

import (
	"context"
)

// iteratorForCreateDeviceModes implements pgx.CopyFromSource.
type iteratorForCreateDeviceModes struct {
	rows                 []CreateDeviceModesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDeviceModes) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDeviceModes) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Mode,
		r.rows[0].InputTopic,
		r.rows[0].AcknowledgementTopic,
		r.rows[0].DeviceID,
	}, nil
}

func (r iteratorForCreateDeviceModes) Err() error {
	return nil
}

func (q *Queries) CreateDeviceModes(ctx context.Context, arg []CreateDeviceModesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"device_mode"}, []string{"mode", "input_topic", "acknowledgment_topic", "device_id"}, &iteratorForCreateDeviceModes{rows: arg})
}

// iteratorForCreateEmployeePresences implements pgx.CopyFromSource.
type iteratorForCreateEmployeePresences struct {
	rows                 []CreateEmployeePresencesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateEmployeePresences) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateEmployeePresences) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ScheduleID,
		r.rows[0].ScheduleName,
		r.rows[0].Type,
		r.rows[0].EmployeeID,
		r.rows[0].Notes,
		r.rows[0].CreatedAt,
		r.rows[0].CreatedBy,
		r.rows[0].EmployeePermissionID,
	}, nil
}

func (r iteratorForCreateEmployeePresences) Err() error {
	return nil
}

func (q *Queries) CreateEmployeePresences(ctx context.Context, arg []CreateEmployeePresencesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"employee_presence"}, []string{"schedule_id", "schedule_name", "type", "employee_id", "notes", "created_at", "created_by", "employee_permission_id"}, &iteratorForCreateEmployeePresences{rows: arg})
}

// iteratorForCreateSantriPresences implements pgx.CopyFromSource.
type iteratorForCreateSantriPresences struct {
	rows                 []CreateSantriPresencesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateSantriPresences) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateSantriPresences) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ScheduleID,
		r.rows[0].ScheduleName,
		r.rows[0].Type,
		r.rows[0].SantriID,
		r.rows[0].Notes,
		r.rows[0].CreatedAt,
		r.rows[0].CreatedBy,
		r.rows[0].SantriPermissionID,
	}, nil
}

func (r iteratorForCreateSantriPresences) Err() error {
	return nil
}

func (q *Queries) CreateSantriPresences(ctx context.Context, arg []CreateSantriPresencesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"santri_presence"}, []string{"schedule_id", "schedule_name", "type", "santri_id", "notes", "created_at", "created_by", "santri_permission_id"}, &iteratorForCreateSantriPresences{rows: arg})
}
