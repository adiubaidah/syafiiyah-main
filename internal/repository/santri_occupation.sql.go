// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: santri_occupation.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSantriOccupation = `-- name: CreateSantriOccupation :one
INSERT INTO
    "santri_occupation" ("name", "description")
VALUES
    ($1, $2) RETURNING id, name, description
`

type CreateSantriOccupationParams struct {
	Name        string      `db:"name"`
	Description pgtype.Text `db:"description"`
}

func (q *Queries) CreateSantriOccupation(ctx context.Context, arg CreateSantriOccupationParams) (SantriOccupation, error) {
	row := q.db.QueryRow(ctx, createSantriOccupation, arg.Name, arg.Description)
	var i SantriOccupation
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const deleteSantriOccupation = `-- name: DeleteSantriOccupation :one
DELETE FROM
    "santri_occupation"
WHERE
    "id" = $1 RETURNING id, name, description
`

func (q *Queries) DeleteSantriOccupation(ctx context.Context, id int32) (SantriOccupation, error) {
	row := q.db.QueryRow(ctx, deleteSantriOccupation, id)
	var i SantriOccupation
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const listSantriOccupations = `-- name: ListSantriOccupations :many
SELECT
    santri_occupation.id, santri_occupation.name, santri_occupation.description,
    COUNT("santri"."id") AS "count"
FROM
    "santri_occupation"
    LEFT JOIN "santri" ON "santri"."occupation_id" = "santri_occupation"."id"
GROUP BY
    "santri_occupation"."id"
ORDER BY
    "santri_occupation"."id" ASC
`

type ListSantriOccupationsRow struct {
	ID          int32       `db:"id"`
	Name        string      `db:"name"`
	Description pgtype.Text `db:"description"`
	Count       int64       `db:"count"`
}

func (q *Queries) ListSantriOccupations(ctx context.Context) ([]ListSantriOccupationsRow, error) {
	rows, err := q.db.Query(ctx, listSantriOccupations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSantriOccupationsRow{}
	for rows.Next() {
		var i ListSantriOccupationsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSantriOccupation = `-- name: UpdateSantriOccupation :one
UPDATE
    "santri_occupation"
SET
    "name" = COALESCE($1, name),
    "description" = $2
WHERE
    "id" = $3 RETURNING id, name, description
`

type UpdateSantriOccupationParams struct {
	Name        pgtype.Text `db:"name"`
	Description pgtype.Text `db:"description"`
	ID          int32       `db:"id"`
}

func (q *Queries) UpdateSantriOccupation(ctx context.Context, arg UpdateSantriOccupationParams) (SantriOccupation, error) {
	row := q.db.QueryRow(ctx, updateSantriOccupation, arg.Name, arg.Description, arg.ID)
	var i SantriOccupation
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}
