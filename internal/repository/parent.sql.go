// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: parent.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countParents = `-- name: CountParents :one
SELECT
    COUNT(*) AS "count"
FROM
    "parent"
WHERE
    (
        $1 :: text IS NULL
        OR "name" ILIKE '%' || $1 || '%'
    )
    AND (
        $2::boolean IS NULL
        OR ($2 = TRUE AND "parent"."user_id" IS NOT NULL)
        OR ($2 = FALSE AND "parent"."user_id" IS NULL)
        )
`

type CountParentsParams struct {
	Q       pgtype.Text `db:"q"`
	HasUser pgtype.Bool `db:"has_user"`
}

func (q *Queries) CountParents(ctx context.Context, arg CountParentsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countParents, arg.Q, arg.HasUser)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createParent = `-- name: CreateParent :one
INSERT INTO
    "parent" (
        "name",
        "address",
        "gender",
        "whatsapp_number",
        "photo",
        "user_id"
    )
VALUES
    (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6
    ) RETURNING id, name, address, gender, whatsapp_number, photo, user_id
`

type CreateParentParams struct {
	Name           string      `db:"name"`
	Address        string      `db:"address"`
	Gender         GenderType  `db:"gender"`
	WhatsappNumber pgtype.Text `db:"whatsapp_number"`
	Photo          pgtype.Text `db:"photo"`
	UserID         pgtype.Int4 `db:"user_id"`
}

func (q *Queries) CreateParent(ctx context.Context, arg CreateParentParams) (Parent, error) {
	row := q.db.QueryRow(ctx, createParent,
		arg.Name,
		arg.Address,
		arg.Gender,
		arg.WhatsappNumber,
		arg.Photo,
		arg.UserID,
	)
	var i Parent
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Gender,
		&i.WhatsappNumber,
		&i.Photo,
		&i.UserID,
	)
	return i, err
}

const deleteParent = `-- name: DeleteParent :one
DELETE FROM
    "parent"
WHERE
    "id" = $1 RETURNING id, name, address, gender, whatsapp_number, photo, user_id
`

func (q *Queries) DeleteParent(ctx context.Context, id int32) (Parent, error) {
	row := q.db.QueryRow(ctx, deleteParent, id)
	var i Parent
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Gender,
		&i.WhatsappNumber,
		&i.Photo,
		&i.UserID,
	)
	return i, err
}

const getParent = `-- name: GetParent :one
SELECT
    parent.id, parent.name, parent.address, parent.gender, parent.whatsapp_number, parent.photo, parent.user_id,
    "user"."id" AS "user_id",
    "user"."username" AS "user_username"
FROM
    "parent"
    LEFT JOIN "user" ON "parent"."user_id" = "user"."id"
WHERE
    "parent"."id" = $1
`

type GetParentRow struct {
	ID             int32       `db:"id"`
	Name           string      `db:"name"`
	Address        string      `db:"address"`
	Gender         GenderType  `db:"gender"`
	WhatsappNumber pgtype.Text `db:"whatsapp_number"`
	Photo          pgtype.Text `db:"photo"`
	UserID         pgtype.Int4 `db:"user_id"`
	UserID_2       pgtype.Int4 `db:"user_id_2"`
	UserUsername   pgtype.Text `db:"user_username"`
}

func (q *Queries) GetParent(ctx context.Context, id int32) (GetParentRow, error) {
	row := q.db.QueryRow(ctx, getParent, id)
	var i GetParentRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Gender,
		&i.WhatsappNumber,
		&i.Photo,
		&i.UserID,
		&i.UserID_2,
		&i.UserUsername,
	)
	return i, err
}

const getParentByUserId = `-- name: GetParentByUserId :one
SELECT
    parent.id, parent.name, parent.address, parent.gender, parent.whatsapp_number, parent.photo, parent.user_id
FROM
    "parent"
WHERE
    "user_id" = $1
`

func (q *Queries) GetParentByUserId(ctx context.Context, userID pgtype.Int4) (Parent, error) {
	row := q.db.QueryRow(ctx, getParentByUserId, userID)
	var i Parent
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Gender,
		&i.WhatsappNumber,
		&i.Photo,
		&i.UserID,
	)
	return i, err
}

const updateParent = `-- name: UpdateParent :one
UPDATE
    "parent"
SET
    "name" = COALESCE($1, name),
    "address" = COALESCE($2, address),
    "gender" = COALESCE($3::gender_type, gender),
    "whatsapp_number" = COALESCE($4, whatsapp_number),
    "photo" = COALESCE($5, photo),
    "user_id" = $6
WHERE
    "id" = $7 RETURNING id, name, address, gender, whatsapp_number, photo, user_id
`

type UpdateParentParams struct {
	Name           pgtype.Text    `db:"name"`
	Address        pgtype.Text    `db:"address"`
	Gender         NullGenderType `db:"gender"`
	WhatsappNumber pgtype.Text    `db:"whatsapp_number"`
	Photo          pgtype.Text    `db:"photo"`
	UserID         pgtype.Int4    `db:"user_id"`
	ID             int32          `db:"id"`
}

func (q *Queries) UpdateParent(ctx context.Context, arg UpdateParentParams) (Parent, error) {
	row := q.db.QueryRow(ctx, updateParent,
		arg.Name,
		arg.Address,
		arg.Gender,
		arg.WhatsappNumber,
		arg.Photo,
		arg.UserID,
		arg.ID,
	)
	var i Parent
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Gender,
		&i.WhatsappNumber,
		&i.Photo,
		&i.UserID,
	)
	return i, err
}
