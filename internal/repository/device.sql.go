// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: device.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO
    "device" ("name")
VALUES
    ($1) RETURNING id, name
`

func (q *Queries) CreateDevice(ctx context.Context, name string) (Device, error) {
	row := q.db.QueryRow(ctx, createDevice, name)
	var i Device
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteDevice = `-- name: DeleteDevice :one
DELETE FROM
    "device"
WHERE
    "id" = $1 RETURNING id, name
`

func (q *Queries) DeleteDevice(ctx context.Context, id int32) (Device, error) {
	row := q.db.QueryRow(ctx, deleteDevice, id)
	var i Device
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listDevices = `-- name: ListDevices :many
SELECT
    "device"."id" AS "id",
    "device"."name" AS "name",
    "device_mode"."id" AS "device_mode.id",
    "device_mode"."mode" AS "device_mode.mode",
    "device_mode"."input_topic" AS "device_mode.input_topic",
    "device_mode"."acknowledgment_topic" AS "device_mode.acknowledgement_topic"
FROM
    "device"
LEFT JOIN
    "device_mode" ON "device"."id" = "device_mode"."device_id"
`

type ListDevicesRow struct {
	ID                             int32              `db:"id"`
	Name                           string             `db:"name"`
	DeviceModeID                   pgtype.Int4        `db:"device_mode.id"`
	DeviceModeMode                 NullDeviceModeType `db:"device_mode.mode"`
	DeviceModeInputTopic           pgtype.Text        `db:"device_mode.input_topic"`
	DeviceModeAcknowledgementTopic pgtype.Text        `db:"device_mode.acknowledgement_topic"`
}

func (q *Queries) ListDevices(ctx context.Context) ([]ListDevicesRow, error) {
	rows, err := q.db.Query(ctx, listDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListDevicesRow{}
	for rows.Next() {
		var i ListDevicesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DeviceModeID,
			&i.DeviceModeMode,
			&i.DeviceModeInputTopic,
			&i.DeviceModeAcknowledgementTopic,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDevice = `-- name: UpdateDevice :one
UPDATE
    "device"
SET
    "name" = COALESCE($1, name)
WHERE
    "id" = $2 RETURNING id, name
`

type UpdateDeviceParams struct {
	Name pgtype.Text `db:"name"`
	ID   int32       `db:"id"`
}

func (q *Queries) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, updateDevice, arg.Name, arg.ID)
	var i Device
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
