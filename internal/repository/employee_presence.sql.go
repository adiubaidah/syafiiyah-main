// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: employee_presence.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countEmployeePresences = `-- name: CountEmployeePresences :one
SELECT
    COUNT(*)
FROM
    "employee_presence"
    INNER JOIN "employee" ON "employee_presence"."employee_id" = "employee"."id"
WHERE
    (
        $1 :: integer IS NULL
        OR "employee_id" = $1 :: integer
    )
    AND (
        $2 :: text IS NULL
        OR "employee"."name" ILIKE '%' || $2 || '%'
    )
    AND (
        $3 :: presence_type IS NULL
        OR "type" = $3 :: presence_type
    )
    AND (
        $4 :: integer IS NULL
        OR "schedule_id" = $4 :: integer
    )
    AND (
        $5 :: date IS NULL
        OR DATE("created_at") >= $5 :: date
    )
    AND (
        $6 :: date IS NULL
        OR DATE("created_at") <= $6 :: date
    )
`

type CountEmployeePresencesParams struct {
	EmployeeID pgtype.Int4      `db:"employee_id"`
	Q          pgtype.Text      `db:"q"`
	Type       NullPresenceType `db:"type"`
	ScheduleID pgtype.Int4      `db:"schedule_id"`
	FromDate   pgtype.Date      `db:"from_date"`
	ToDate     pgtype.Date      `db:"to_date"`
}

func (q *Queries) CountEmployeePresences(ctx context.Context, arg CountEmployeePresencesParams) (int64, error) {
	row := q.db.QueryRow(ctx, countEmployeePresences,
		arg.EmployeeID,
		arg.Q,
		arg.Type,
		arg.ScheduleID,
		arg.FromDate,
		arg.ToDate,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createEmployeePresence = `-- name: CreateEmployeePresence :one
INSERT INTO
    "employee_presence" (
        "schedule_id",
        "schedule_name",
        "type",
        "employee_id",
        "notes",
        "created_by",
        "employee_permission_id"
    )
VALUES
    (
        $1,
        $2,
        $3 :: presence_type,
        $4,
        $5,
        $6 :: presence_created_by_type,
        $7
    ) RETURNING id, schedule_id, schedule_name, type, employee_id, created_at, created_by, notes, employee_permission_id
`

type CreateEmployeePresenceParams struct {
	ScheduleID           int32                 `db:"schedule_id"`
	ScheduleName         string                `db:"schedule_name"`
	Type                 PresenceType          `db:"type"`
	EmployeeID           int32                 `db:"employee_id"`
	Notes                pgtype.Text           `db:"notes"`
	CreatedBy            PresenceCreatedByType `db:"created_by"`
	EmployeePermissionID pgtype.Int4           `db:"employee_permission_id"`
}

func (q *Queries) CreateEmployeePresence(ctx context.Context, arg CreateEmployeePresenceParams) (EmployeePresence, error) {
	row := q.db.QueryRow(ctx, createEmployeePresence,
		arg.ScheduleID,
		arg.ScheduleName,
		arg.Type,
		arg.EmployeeID,
		arg.Notes,
		arg.CreatedBy,
		arg.EmployeePermissionID,
	)
	var i EmployeePresence
	err := row.Scan(
		&i.ID,
		&i.ScheduleID,
		&i.ScheduleName,
		&i.Type,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.Notes,
		&i.EmployeePermissionID,
	)
	return i, err
}

type CreateEmployeePresencesParams struct {
	ScheduleID           int32                 `db:"schedule_id"`
	ScheduleName         string                `db:"schedule_name"`
	Type                 PresenceType          `db:"type"`
	EmployeeID           int32                 `db:"employee_id"`
	Notes                pgtype.Text           `db:"notes"`
	CreatedAt            pgtype.Timestamptz    `db:"created_at"`
	CreatedBy            PresenceCreatedByType `db:"created_by"`
	EmployeePermissionID pgtype.Int4           `db:"employee_permission_id"`
}

const deleteEmployeePresence = `-- name: DeleteEmployeePresence :one
DELETE FROM
    "employee_presence"
WHERE
    "id" = $1
RETURNING id, schedule_id, schedule_name, type, employee_id, created_at, created_by, notes, employee_permission_id
`

func (q *Queries) DeleteEmployeePresence(ctx context.Context, id int32) (EmployeePresence, error) {
	row := q.db.QueryRow(ctx, deleteEmployeePresence, id)
	var i EmployeePresence
	err := row.Scan(
		&i.ID,
		&i.ScheduleID,
		&i.ScheduleName,
		&i.Type,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.Notes,
		&i.EmployeePermissionID,
	)
	return i, err
}

const listEmployeePresences = `-- name: ListEmployeePresences :many
SELECT
    employee_presence.id, employee_presence.schedule_id, employee_presence.schedule_name, employee_presence.type, employee_presence.employee_id, employee_presence.created_at, employee_presence.created_by, employee_presence.notes, employee_presence.employee_permission_id,
    "employee"."name" AS "employee_name"
FROM
    "employee_presence"
    INNER JOIN "employee" ON "employee_presence"."employee_id" = "employee"."id"
WHERE
    (
        $1 :: integer IS NULL
        OR "employee_id" = $1 :: integer
    )
    AND (
        $2 :: text IS NULL
        OR "employee"."name" ILIKE '%' || $2 || '%'
    )
    AND (
        $3 :: presence_type IS NULL
        OR "type" = $3 :: presence_type
    )
    AND (
        $4 :: integer IS NULL
        OR "schedule_id" = $4 :: integer
    )
    AND (
        $5 :: date IS NULL
        OR DATE("created_at") >= $5 :: date
    )
    AND (
        $6 :: date IS NULL
        OR DATE("created_at") <= $6 :: date
    )
ORDER BY
    "employee_presence"."id" DESC
LIMIT
    $8 OFFSET $7
`

type ListEmployeePresencesParams struct {
	EmployeeID   pgtype.Int4      `db:"employee_id"`
	Q            pgtype.Text      `db:"q"`
	Type         NullPresenceType `db:"type"`
	ScheduleID   pgtype.Int4      `db:"schedule_id"`
	FromDate     pgtype.Date      `db:"from_date"`
	ToDate       pgtype.Date      `db:"to_date"`
	OffsetNumber int32            `db:"offset_number"`
	LimitNumber  int32            `db:"limit_number"`
}

type ListEmployeePresencesRow struct {
	ID                   int32                 `db:"id"`
	ScheduleID           int32                 `db:"schedule_id"`
	ScheduleName         string                `db:"schedule_name"`
	Type                 PresenceType          `db:"type"`
	EmployeeID           int32                 `db:"employee_id"`
	CreatedAt            pgtype.Timestamptz    `db:"created_at"`
	CreatedBy            PresenceCreatedByType `db:"created_by"`
	Notes                pgtype.Text           `db:"notes"`
	EmployeePermissionID pgtype.Int4           `db:"employee_permission_id"`
	EmployeeName         string                `db:"employee_name"`
}

func (q *Queries) ListEmployeePresences(ctx context.Context, arg ListEmployeePresencesParams) ([]ListEmployeePresencesRow, error) {
	rows, err := q.db.Query(ctx, listEmployeePresences,
		arg.EmployeeID,
		arg.Q,
		arg.Type,
		arg.ScheduleID,
		arg.FromDate,
		arg.ToDate,
		arg.OffsetNumber,
		arg.LimitNumber,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListEmployeePresencesRow{}
	for rows.Next() {
		var i ListEmployeePresencesRow
		if err := rows.Scan(
			&i.ID,
			&i.ScheduleID,
			&i.ScheduleName,
			&i.Type,
			&i.EmployeeID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.Notes,
			&i.EmployeePermissionID,
			&i.EmployeeName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMissingEmployeePresences = `-- name: ListMissingEmployeePresences :many
SELECT 
    "employee"."id", "employee"."name"
FROM
    "employee"
WHERE
    NOT EXISTS (
        SELECT
            1
        FROM
            "employee_presence"
        WHERE
            "employee_presence"."employee_id" = "employee"."id"
            AND DATE("employee_presence"."created_at") = $1::date
            AND "employee_presence"."schedule_id" = $2::integer
    )
`

type ListMissingEmployeePresencesParams struct {
	Date       pgtype.Date `db:"date"`
	ScheduleID pgtype.Int4 `db:"schedule_id"`
}

type ListMissingEmployeePresencesRow struct {
	ID   int32  `db:"id"`
	Name string `db:"name"`
}

func (q *Queries) ListMissingEmployeePresences(ctx context.Context, arg ListMissingEmployeePresencesParams) ([]ListMissingEmployeePresencesRow, error) {
	rows, err := q.db.Query(ctx, listMissingEmployeePresences, arg.Date, arg.ScheduleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListMissingEmployeePresencesRow{}
	for rows.Next() {
		var i ListMissingEmployeePresencesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployeePresence = `-- name: UpdateEmployeePresence :one
UPDATE
    "employee_presence"
SET
    "schedule_id" = COALESCE($1, schedule_id),
    "schedule_name" = COALESCE($2, schedule_name),
    "type" = COALESCE($3::presence_type, type),
    "employee_id" = COALESCE($4, employee_id),
    "notes" = $5,
    "employee_permission_id" = $6
WHERE
    "id" = $7
RETURNING id, schedule_id, schedule_name, type, employee_id, created_at, created_by, notes, employee_permission_id
`

type UpdateEmployeePresenceParams struct {
	ScheduleID           pgtype.Int4      `db:"schedule_id"`
	ScheduleName         pgtype.Text      `db:"schedule_name"`
	Type                 NullPresenceType `db:"type"`
	EmployeeID           pgtype.Int4      `db:"employee_id"`
	Notes                pgtype.Text      `db:"notes"`
	EmployeePermissionID pgtype.Int4      `db:"employee_permission_id"`
	ID                   int32            `db:"id"`
}

func (q *Queries) UpdateEmployeePresence(ctx context.Context, arg UpdateEmployeePresenceParams) (EmployeePresence, error) {
	row := q.db.QueryRow(ctx, updateEmployeePresence,
		arg.ScheduleID,
		arg.ScheduleName,
		arg.Type,
		arg.EmployeeID,
		arg.Notes,
		arg.EmployeePermissionID,
		arg.ID,
	)
	var i EmployeePresence
	err := row.Scan(
		&i.ID,
		&i.ScheduleID,
		&i.ScheduleName,
		&i.Type,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.Notes,
		&i.EmployeePermissionID,
	)
	return i, err
}
