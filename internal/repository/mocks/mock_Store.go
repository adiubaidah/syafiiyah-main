// Code generated by mockery v2.52.1. DO NOT EDIT.

package repository

import (
	context "context"

	pgtype "github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/adiubaidah/syafiiyah-main/internal/repository"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// CountEmployeePresences provides a mock function with given fields: ctx, arg
func (_m *MockStore) CountEmployeePresences(ctx context.Context, arg repository.CountEmployeePresencesParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CountEmployeePresences")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CountEmployeePresencesParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.CountEmployeePresencesParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.CountEmployeePresencesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CountEmployeePresences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountEmployeePresences'
type MockStore_CountEmployeePresences_Call struct {
	*mock.Call
}

// CountEmployeePresences is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.CountEmployeePresencesParams
func (_e *MockStore_Expecter) CountEmployeePresences(ctx interface{}, arg interface{}) *MockStore_CountEmployeePresences_Call {
	return &MockStore_CountEmployeePresences_Call{Call: _e.mock.On("CountEmployeePresences", ctx, arg)}
}

func (_c *MockStore_CountEmployeePresences_Call) Run(run func(ctx context.Context, arg repository.CountEmployeePresencesParams)) *MockStore_CountEmployeePresences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CountEmployeePresencesParams))
	})
	return _c
}

func (_c *MockStore_CountEmployeePresences_Call) Return(_a0 int64, _a1 error) *MockStore_CountEmployeePresences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CountEmployeePresences_Call) RunAndReturn(run func(context.Context, repository.CountEmployeePresencesParams) (int64, error)) *MockStore_CountEmployeePresences_Call {
	_c.Call.Return(run)
	return _c
}

// CountEmployees provides a mock function with given fields: ctx, arg
func (_m *MockStore) CountEmployees(ctx context.Context, arg repository.CountEmployeesParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CountEmployees")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CountEmployeesParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.CountEmployeesParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.CountEmployeesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CountEmployees_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountEmployees'
type MockStore_CountEmployees_Call struct {
	*mock.Call
}

// CountEmployees is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.CountEmployeesParams
func (_e *MockStore_Expecter) CountEmployees(ctx interface{}, arg interface{}) *MockStore_CountEmployees_Call {
	return &MockStore_CountEmployees_Call{Call: _e.mock.On("CountEmployees", ctx, arg)}
}

func (_c *MockStore_CountEmployees_Call) Run(run func(ctx context.Context, arg repository.CountEmployeesParams)) *MockStore_CountEmployees_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CountEmployeesParams))
	})
	return _c
}

func (_c *MockStore_CountEmployees_Call) Return(_a0 int64, _a1 error) *MockStore_CountEmployees_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CountEmployees_Call) RunAndReturn(run func(context.Context, repository.CountEmployeesParams) (int64, error)) *MockStore_CountEmployees_Call {
	_c.Call.Return(run)
	return _c
}

// CountParents provides a mock function with given fields: ctx, arg
func (_m *MockStore) CountParents(ctx context.Context, arg repository.CountParentsParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CountParents")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CountParentsParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.CountParentsParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.CountParentsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CountParents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountParents'
type MockStore_CountParents_Call struct {
	*mock.Call
}

// CountParents is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.CountParentsParams
func (_e *MockStore_Expecter) CountParents(ctx interface{}, arg interface{}) *MockStore_CountParents_Call {
	return &MockStore_CountParents_Call{Call: _e.mock.On("CountParents", ctx, arg)}
}

func (_c *MockStore_CountParents_Call) Run(run func(ctx context.Context, arg repository.CountParentsParams)) *MockStore_CountParents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CountParentsParams))
	})
	return _c
}

func (_c *MockStore_CountParents_Call) Return(_a0 int64, _a1 error) *MockStore_CountParents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CountParents_Call) RunAndReturn(run func(context.Context, repository.CountParentsParams) (int64, error)) *MockStore_CountParents_Call {
	_c.Call.Return(run)
	return _c
}

// CountSantri provides a mock function with given fields: ctx, arg
func (_m *MockStore) CountSantri(ctx context.Context, arg repository.CountSantriParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CountSantri")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CountSantriParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.CountSantriParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.CountSantriParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CountSantri_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountSantri'
type MockStore_CountSantri_Call struct {
	*mock.Call
}

// CountSantri is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.CountSantriParams
func (_e *MockStore_Expecter) CountSantri(ctx interface{}, arg interface{}) *MockStore_CountSantri_Call {
	return &MockStore_CountSantri_Call{Call: _e.mock.On("CountSantri", ctx, arg)}
}

func (_c *MockStore_CountSantri_Call) Run(run func(ctx context.Context, arg repository.CountSantriParams)) *MockStore_CountSantri_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CountSantriParams))
	})
	return _c
}

func (_c *MockStore_CountSantri_Call) Return(_a0 int64, _a1 error) *MockStore_CountSantri_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CountSantri_Call) RunAndReturn(run func(context.Context, repository.CountSantriParams) (int64, error)) *MockStore_CountSantri_Call {
	_c.Call.Return(run)
	return _c
}

// CountSantriPresences provides a mock function with given fields: ctx, arg
func (_m *MockStore) CountSantriPresences(ctx context.Context, arg repository.CountSantriPresencesParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CountSantriPresences")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CountSantriPresencesParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.CountSantriPresencesParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.CountSantriPresencesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CountSantriPresences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountSantriPresences'
type MockStore_CountSantriPresences_Call struct {
	*mock.Call
}

// CountSantriPresences is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.CountSantriPresencesParams
func (_e *MockStore_Expecter) CountSantriPresences(ctx interface{}, arg interface{}) *MockStore_CountSantriPresences_Call {
	return &MockStore_CountSantriPresences_Call{Call: _e.mock.On("CountSantriPresences", ctx, arg)}
}

func (_c *MockStore_CountSantriPresences_Call) Run(run func(ctx context.Context, arg repository.CountSantriPresencesParams)) *MockStore_CountSantriPresences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CountSantriPresencesParams))
	})
	return _c
}

func (_c *MockStore_CountSantriPresences_Call) Return(_a0 int64, _a1 error) *MockStore_CountSantriPresences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CountSantriPresences_Call) RunAndReturn(run func(context.Context, repository.CountSantriPresencesParams) (int64, error)) *MockStore_CountSantriPresences_Call {
	_c.Call.Return(run)
	return _c
}

// CountSmartCards provides a mock function with given fields: ctx, arg
func (_m *MockStore) CountSmartCards(ctx context.Context, arg repository.CountSmartCardsParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CountSmartCards")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CountSmartCardsParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.CountSmartCardsParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.CountSmartCardsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CountSmartCards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountSmartCards'
type MockStore_CountSmartCards_Call struct {
	*mock.Call
}

// CountSmartCards is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.CountSmartCardsParams
func (_e *MockStore_Expecter) CountSmartCards(ctx interface{}, arg interface{}) *MockStore_CountSmartCards_Call {
	return &MockStore_CountSmartCards_Call{Call: _e.mock.On("CountSmartCards", ctx, arg)}
}

func (_c *MockStore_CountSmartCards_Call) Run(run func(ctx context.Context, arg repository.CountSmartCardsParams)) *MockStore_CountSmartCards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CountSmartCardsParams))
	})
	return _c
}

func (_c *MockStore_CountSmartCards_Call) Return(_a0 int64, _a1 error) *MockStore_CountSmartCards_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CountSmartCards_Call) RunAndReturn(run func(context.Context, repository.CountSmartCardsParams) (int64, error)) *MockStore_CountSmartCards_Call {
	_c.Call.Return(run)
	return _c
}

// CountUsers provides a mock function with given fields: ctx, arg
func (_m *MockStore) CountUsers(ctx context.Context, arg repository.CountUsersParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CountUsers")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CountUsersParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.CountUsersParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.CountUsersParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CountUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountUsers'
type MockStore_CountUsers_Call struct {
	*mock.Call
}

// CountUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.CountUsersParams
func (_e *MockStore_Expecter) CountUsers(ctx interface{}, arg interface{}) *MockStore_CountUsers_Call {
	return &MockStore_CountUsers_Call{Call: _e.mock.On("CountUsers", ctx, arg)}
}

func (_c *MockStore_CountUsers_Call) Run(run func(ctx context.Context, arg repository.CountUsersParams)) *MockStore_CountUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CountUsersParams))
	})
	return _c
}

func (_c *MockStore_CountUsers_Call) Return(_a0 int64, _a1 error) *MockStore_CountUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CountUsers_Call) RunAndReturn(run func(context.Context, repository.CountUsersParams) (int64, error)) *MockStore_CountUsers_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDevice provides a mock function with given fields: ctx, name
func (_m *MockStore) CreateDevice(ctx context.Context, name string) (repository.Device, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateDevice")
	}

	var r0 repository.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (repository.Device, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) repository.Device); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(repository.Device)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDevice'
type MockStore_CreateDevice_Call struct {
	*mock.Call
}

// CreateDevice is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockStore_Expecter) CreateDevice(ctx interface{}, name interface{}) *MockStore_CreateDevice_Call {
	return &MockStore_CreateDevice_Call{Call: _e.mock.On("CreateDevice", ctx, name)}
}

func (_c *MockStore_CreateDevice_Call) Run(run func(ctx context.Context, name string)) *MockStore_CreateDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_CreateDevice_Call) Return(_a0 repository.Device, _a1 error) *MockStore_CreateDevice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateDevice_Call) RunAndReturn(run func(context.Context, string) (repository.Device, error)) *MockStore_CreateDevice_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDeviceModes provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateDeviceModes(ctx context.Context, arg []repository.CreateDeviceModesParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeviceModes")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []repository.CreateDeviceModesParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []repository.CreateDeviceModesParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []repository.CreateDeviceModesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateDeviceModes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDeviceModes'
type MockStore_CreateDeviceModes_Call struct {
	*mock.Call
}

// CreateDeviceModes is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []repository.CreateDeviceModesParams
func (_e *MockStore_Expecter) CreateDeviceModes(ctx interface{}, arg interface{}) *MockStore_CreateDeviceModes_Call {
	return &MockStore_CreateDeviceModes_Call{Call: _e.mock.On("CreateDeviceModes", ctx, arg)}
}

func (_c *MockStore_CreateDeviceModes_Call) Run(run func(ctx context.Context, arg []repository.CreateDeviceModesParams)) *MockStore_CreateDeviceModes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]repository.CreateDeviceModesParams))
	})
	return _c
}

func (_c *MockStore_CreateDeviceModes_Call) Return(_a0 int64, _a1 error) *MockStore_CreateDeviceModes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateDeviceModes_Call) RunAndReturn(run func(context.Context, []repository.CreateDeviceModesParams) (int64, error)) *MockStore_CreateDeviceModes_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEmployee provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateEmployee(ctx context.Context, arg repository.CreateEmployeeParams) (repository.Employee, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmployee")
	}

	var r0 repository.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateEmployeeParams) (repository.Employee, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateEmployeeParams) repository.Employee); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.Employee)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.CreateEmployeeParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateEmployee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEmployee'
type MockStore_CreateEmployee_Call struct {
	*mock.Call
}

// CreateEmployee is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.CreateEmployeeParams
func (_e *MockStore_Expecter) CreateEmployee(ctx interface{}, arg interface{}) *MockStore_CreateEmployee_Call {
	return &MockStore_CreateEmployee_Call{Call: _e.mock.On("CreateEmployee", ctx, arg)}
}

func (_c *MockStore_CreateEmployee_Call) Run(run func(ctx context.Context, arg repository.CreateEmployeeParams)) *MockStore_CreateEmployee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CreateEmployeeParams))
	})
	return _c
}

func (_c *MockStore_CreateEmployee_Call) Return(_a0 repository.Employee, _a1 error) *MockStore_CreateEmployee_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateEmployee_Call) RunAndReturn(run func(context.Context, repository.CreateEmployeeParams) (repository.Employee, error)) *MockStore_CreateEmployee_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEmployeeOccupation provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateEmployeeOccupation(ctx context.Context, arg repository.CreateEmployeeOccupationParams) (repository.EmployeeOccupation, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmployeeOccupation")
	}

	var r0 repository.EmployeeOccupation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateEmployeeOccupationParams) (repository.EmployeeOccupation, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateEmployeeOccupationParams) repository.EmployeeOccupation); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.EmployeeOccupation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.CreateEmployeeOccupationParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateEmployeeOccupation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEmployeeOccupation'
type MockStore_CreateEmployeeOccupation_Call struct {
	*mock.Call
}

// CreateEmployeeOccupation is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.CreateEmployeeOccupationParams
func (_e *MockStore_Expecter) CreateEmployeeOccupation(ctx interface{}, arg interface{}) *MockStore_CreateEmployeeOccupation_Call {
	return &MockStore_CreateEmployeeOccupation_Call{Call: _e.mock.On("CreateEmployeeOccupation", ctx, arg)}
}

func (_c *MockStore_CreateEmployeeOccupation_Call) Run(run func(ctx context.Context, arg repository.CreateEmployeeOccupationParams)) *MockStore_CreateEmployeeOccupation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CreateEmployeeOccupationParams))
	})
	return _c
}

func (_c *MockStore_CreateEmployeeOccupation_Call) Return(_a0 repository.EmployeeOccupation, _a1 error) *MockStore_CreateEmployeeOccupation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateEmployeeOccupation_Call) RunAndReturn(run func(context.Context, repository.CreateEmployeeOccupationParams) (repository.EmployeeOccupation, error)) *MockStore_CreateEmployeeOccupation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEmployeePermission provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateEmployeePermission(ctx context.Context, arg repository.CreateEmployeePermissionParams) (repository.EmployeePermission, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmployeePermission")
	}

	var r0 repository.EmployeePermission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateEmployeePermissionParams) (repository.EmployeePermission, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateEmployeePermissionParams) repository.EmployeePermission); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.EmployeePermission)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.CreateEmployeePermissionParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateEmployeePermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEmployeePermission'
type MockStore_CreateEmployeePermission_Call struct {
	*mock.Call
}

// CreateEmployeePermission is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.CreateEmployeePermissionParams
func (_e *MockStore_Expecter) CreateEmployeePermission(ctx interface{}, arg interface{}) *MockStore_CreateEmployeePermission_Call {
	return &MockStore_CreateEmployeePermission_Call{Call: _e.mock.On("CreateEmployeePermission", ctx, arg)}
}

func (_c *MockStore_CreateEmployeePermission_Call) Run(run func(ctx context.Context, arg repository.CreateEmployeePermissionParams)) *MockStore_CreateEmployeePermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CreateEmployeePermissionParams))
	})
	return _c
}

func (_c *MockStore_CreateEmployeePermission_Call) Return(_a0 repository.EmployeePermission, _a1 error) *MockStore_CreateEmployeePermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateEmployeePermission_Call) RunAndReturn(run func(context.Context, repository.CreateEmployeePermissionParams) (repository.EmployeePermission, error)) *MockStore_CreateEmployeePermission_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEmployeePresence provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateEmployeePresence(ctx context.Context, arg repository.CreateEmployeePresenceParams) (repository.EmployeePresence, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmployeePresence")
	}

	var r0 repository.EmployeePresence
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateEmployeePresenceParams) (repository.EmployeePresence, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateEmployeePresenceParams) repository.EmployeePresence); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.EmployeePresence)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.CreateEmployeePresenceParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateEmployeePresence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEmployeePresence'
type MockStore_CreateEmployeePresence_Call struct {
	*mock.Call
}

// CreateEmployeePresence is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.CreateEmployeePresenceParams
func (_e *MockStore_Expecter) CreateEmployeePresence(ctx interface{}, arg interface{}) *MockStore_CreateEmployeePresence_Call {
	return &MockStore_CreateEmployeePresence_Call{Call: _e.mock.On("CreateEmployeePresence", ctx, arg)}
}

func (_c *MockStore_CreateEmployeePresence_Call) Run(run func(ctx context.Context, arg repository.CreateEmployeePresenceParams)) *MockStore_CreateEmployeePresence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CreateEmployeePresenceParams))
	})
	return _c
}

func (_c *MockStore_CreateEmployeePresence_Call) Return(_a0 repository.EmployeePresence, _a1 error) *MockStore_CreateEmployeePresence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateEmployeePresence_Call) RunAndReturn(run func(context.Context, repository.CreateEmployeePresenceParams) (repository.EmployeePresence, error)) *MockStore_CreateEmployeePresence_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEmployeePresences provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateEmployeePresences(ctx context.Context, arg []repository.CreateEmployeePresencesParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmployeePresences")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []repository.CreateEmployeePresencesParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []repository.CreateEmployeePresencesParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []repository.CreateEmployeePresencesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateEmployeePresences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEmployeePresences'
type MockStore_CreateEmployeePresences_Call struct {
	*mock.Call
}

// CreateEmployeePresences is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []repository.CreateEmployeePresencesParams
func (_e *MockStore_Expecter) CreateEmployeePresences(ctx interface{}, arg interface{}) *MockStore_CreateEmployeePresences_Call {
	return &MockStore_CreateEmployeePresences_Call{Call: _e.mock.On("CreateEmployeePresences", ctx, arg)}
}

func (_c *MockStore_CreateEmployeePresences_Call) Run(run func(ctx context.Context, arg []repository.CreateEmployeePresencesParams)) *MockStore_CreateEmployeePresences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]repository.CreateEmployeePresencesParams))
	})
	return _c
}

func (_c *MockStore_CreateEmployeePresences_Call) Return(_a0 int64, _a1 error) *MockStore_CreateEmployeePresences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateEmployeePresences_Call) RunAndReturn(run func(context.Context, []repository.CreateEmployeePresencesParams) (int64, error)) *MockStore_CreateEmployeePresences_Call {
	_c.Call.Return(run)
	return _c
}

// CreateParent provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateParent(ctx context.Context, arg repository.CreateParentParams) (repository.Parent, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateParent")
	}

	var r0 repository.Parent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateParentParams) (repository.Parent, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateParentParams) repository.Parent); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.Parent)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.CreateParentParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateParent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateParent'
type MockStore_CreateParent_Call struct {
	*mock.Call
}

// CreateParent is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.CreateParentParams
func (_e *MockStore_Expecter) CreateParent(ctx interface{}, arg interface{}) *MockStore_CreateParent_Call {
	return &MockStore_CreateParent_Call{Call: _e.mock.On("CreateParent", ctx, arg)}
}

func (_c *MockStore_CreateParent_Call) Run(run func(ctx context.Context, arg repository.CreateParentParams)) *MockStore_CreateParent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CreateParentParams))
	})
	return _c
}

func (_c *MockStore_CreateParent_Call) Return(_a0 repository.Parent, _a1 error) *MockStore_CreateParent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateParent_Call) RunAndReturn(run func(context.Context, repository.CreateParentParams) (repository.Parent, error)) *MockStore_CreateParent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSantri provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateSantri(ctx context.Context, arg repository.CreateSantriParams) (repository.Santri, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateSantri")
	}

	var r0 repository.Santri
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateSantriParams) (repository.Santri, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateSantriParams) repository.Santri); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.Santri)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.CreateSantriParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateSantri_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSantri'
type MockStore_CreateSantri_Call struct {
	*mock.Call
}

// CreateSantri is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.CreateSantriParams
func (_e *MockStore_Expecter) CreateSantri(ctx interface{}, arg interface{}) *MockStore_CreateSantri_Call {
	return &MockStore_CreateSantri_Call{Call: _e.mock.On("CreateSantri", ctx, arg)}
}

func (_c *MockStore_CreateSantri_Call) Run(run func(ctx context.Context, arg repository.CreateSantriParams)) *MockStore_CreateSantri_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CreateSantriParams))
	})
	return _c
}

func (_c *MockStore_CreateSantri_Call) Return(_a0 repository.Santri, _a1 error) *MockStore_CreateSantri_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateSantri_Call) RunAndReturn(run func(context.Context, repository.CreateSantriParams) (repository.Santri, error)) *MockStore_CreateSantri_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSantriOccupation provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateSantriOccupation(ctx context.Context, arg repository.CreateSantriOccupationParams) (repository.SantriOccupation, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateSantriOccupation")
	}

	var r0 repository.SantriOccupation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateSantriOccupationParams) (repository.SantriOccupation, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateSantriOccupationParams) repository.SantriOccupation); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.SantriOccupation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.CreateSantriOccupationParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateSantriOccupation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSantriOccupation'
type MockStore_CreateSantriOccupation_Call struct {
	*mock.Call
}

// CreateSantriOccupation is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.CreateSantriOccupationParams
func (_e *MockStore_Expecter) CreateSantriOccupation(ctx interface{}, arg interface{}) *MockStore_CreateSantriOccupation_Call {
	return &MockStore_CreateSantriOccupation_Call{Call: _e.mock.On("CreateSantriOccupation", ctx, arg)}
}

func (_c *MockStore_CreateSantriOccupation_Call) Run(run func(ctx context.Context, arg repository.CreateSantriOccupationParams)) *MockStore_CreateSantriOccupation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CreateSantriOccupationParams))
	})
	return _c
}

func (_c *MockStore_CreateSantriOccupation_Call) Return(_a0 repository.SantriOccupation, _a1 error) *MockStore_CreateSantriOccupation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateSantriOccupation_Call) RunAndReturn(run func(context.Context, repository.CreateSantriOccupationParams) (repository.SantriOccupation, error)) *MockStore_CreateSantriOccupation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSantriPermission provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateSantriPermission(ctx context.Context, arg repository.CreateSantriPermissionParams) (repository.SantriPermission, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateSantriPermission")
	}

	var r0 repository.SantriPermission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateSantriPermissionParams) (repository.SantriPermission, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateSantriPermissionParams) repository.SantriPermission); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.SantriPermission)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.CreateSantriPermissionParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateSantriPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSantriPermission'
type MockStore_CreateSantriPermission_Call struct {
	*mock.Call
}

// CreateSantriPermission is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.CreateSantriPermissionParams
func (_e *MockStore_Expecter) CreateSantriPermission(ctx interface{}, arg interface{}) *MockStore_CreateSantriPermission_Call {
	return &MockStore_CreateSantriPermission_Call{Call: _e.mock.On("CreateSantriPermission", ctx, arg)}
}

func (_c *MockStore_CreateSantriPermission_Call) Run(run func(ctx context.Context, arg repository.CreateSantriPermissionParams)) *MockStore_CreateSantriPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CreateSantriPermissionParams))
	})
	return _c
}

func (_c *MockStore_CreateSantriPermission_Call) Return(_a0 repository.SantriPermission, _a1 error) *MockStore_CreateSantriPermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateSantriPermission_Call) RunAndReturn(run func(context.Context, repository.CreateSantriPermissionParams) (repository.SantriPermission, error)) *MockStore_CreateSantriPermission_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSantriPresence provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateSantriPresence(ctx context.Context, arg repository.CreateSantriPresenceParams) (repository.SantriPresence, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateSantriPresence")
	}

	var r0 repository.SantriPresence
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateSantriPresenceParams) (repository.SantriPresence, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateSantriPresenceParams) repository.SantriPresence); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.SantriPresence)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.CreateSantriPresenceParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateSantriPresence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSantriPresence'
type MockStore_CreateSantriPresence_Call struct {
	*mock.Call
}

// CreateSantriPresence is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.CreateSantriPresenceParams
func (_e *MockStore_Expecter) CreateSantriPresence(ctx interface{}, arg interface{}) *MockStore_CreateSantriPresence_Call {
	return &MockStore_CreateSantriPresence_Call{Call: _e.mock.On("CreateSantriPresence", ctx, arg)}
}

func (_c *MockStore_CreateSantriPresence_Call) Run(run func(ctx context.Context, arg repository.CreateSantriPresenceParams)) *MockStore_CreateSantriPresence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CreateSantriPresenceParams))
	})
	return _c
}

func (_c *MockStore_CreateSantriPresence_Call) Return(_a0 repository.SantriPresence, _a1 error) *MockStore_CreateSantriPresence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateSantriPresence_Call) RunAndReturn(run func(context.Context, repository.CreateSantriPresenceParams) (repository.SantriPresence, error)) *MockStore_CreateSantriPresence_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSantriPresences provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateSantriPresences(ctx context.Context, arg []repository.CreateSantriPresencesParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateSantriPresences")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []repository.CreateSantriPresencesParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []repository.CreateSantriPresencesParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []repository.CreateSantriPresencesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateSantriPresences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSantriPresences'
type MockStore_CreateSantriPresences_Call struct {
	*mock.Call
}

// CreateSantriPresences is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []repository.CreateSantriPresencesParams
func (_e *MockStore_Expecter) CreateSantriPresences(ctx interface{}, arg interface{}) *MockStore_CreateSantriPresences_Call {
	return &MockStore_CreateSantriPresences_Call{Call: _e.mock.On("CreateSantriPresences", ctx, arg)}
}

func (_c *MockStore_CreateSantriPresences_Call) Run(run func(ctx context.Context, arg []repository.CreateSantriPresencesParams)) *MockStore_CreateSantriPresences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]repository.CreateSantriPresencesParams))
	})
	return _c
}

func (_c *MockStore_CreateSantriPresences_Call) Return(_a0 int64, _a1 error) *MockStore_CreateSantriPresences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateSantriPresences_Call) RunAndReturn(run func(context.Context, []repository.CreateSantriPresencesParams) (int64, error)) *MockStore_CreateSantriPresences_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSmartCard provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateSmartCard(ctx context.Context, arg repository.CreateSmartCardParams) (repository.SmartCard, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateSmartCard")
	}

	var r0 repository.SmartCard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateSmartCardParams) (repository.SmartCard, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateSmartCardParams) repository.SmartCard); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.SmartCard)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.CreateSmartCardParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateSmartCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSmartCard'
type MockStore_CreateSmartCard_Call struct {
	*mock.Call
}

// CreateSmartCard is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.CreateSmartCardParams
func (_e *MockStore_Expecter) CreateSmartCard(ctx interface{}, arg interface{}) *MockStore_CreateSmartCard_Call {
	return &MockStore_CreateSmartCard_Call{Call: _e.mock.On("CreateSmartCard", ctx, arg)}
}

func (_c *MockStore_CreateSmartCard_Call) Run(run func(ctx context.Context, arg repository.CreateSmartCardParams)) *MockStore_CreateSmartCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CreateSmartCardParams))
	})
	return _c
}

func (_c *MockStore_CreateSmartCard_Call) Return(_a0 repository.SmartCard, _a1 error) *MockStore_CreateSmartCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateSmartCard_Call) RunAndReturn(run func(context.Context, repository.CreateSmartCardParams) (repository.SmartCard, error)) *MockStore_CreateSmartCard_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateUser(ctx context.Context, arg repository.CreateUserParams) (repository.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 repository.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateUserParams) (repository.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateUserParams) repository.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.CreateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockStore_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.CreateUserParams
func (_e *MockStore_Expecter) CreateUser(ctx interface{}, arg interface{}) *MockStore_CreateUser_Call {
	return &MockStore_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, arg)}
}

func (_c *MockStore_CreateUser_Call) Run(run func(ctx context.Context, arg repository.CreateUserParams)) *MockStore_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CreateUserParams))
	})
	return _c
}

func (_c *MockStore_CreateUser_Call) Return(_a0 repository.User, _a1 error) *MockStore_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateUser_Call) RunAndReturn(run func(context.Context, repository.CreateUserParams) (repository.User, error)) *MockStore_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDevice provides a mock function with given fields: ctx, id
func (_m *MockStore) DeleteDevice(ctx context.Context, id int32) (repository.Device, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDevice")
	}

	var r0 repository.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (repository.Device, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) repository.Device); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.Device)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_DeleteDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDevice'
type MockStore_DeleteDevice_Call struct {
	*mock.Call
}

// DeleteDevice is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockStore_Expecter) DeleteDevice(ctx interface{}, id interface{}) *MockStore_DeleteDevice_Call {
	return &MockStore_DeleteDevice_Call{Call: _e.mock.On("DeleteDevice", ctx, id)}
}

func (_c *MockStore_DeleteDevice_Call) Run(run func(ctx context.Context, id int32)) *MockStore_DeleteDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_DeleteDevice_Call) Return(_a0 repository.Device, _a1 error) *MockStore_DeleteDevice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_DeleteDevice_Call) RunAndReturn(run func(context.Context, int32) (repository.Device, error)) *MockStore_DeleteDevice_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDeviceModeByDeviceId provides a mock function with given fields: ctx, deviceID
func (_m *MockStore) DeleteDeviceModeByDeviceId(ctx context.Context, deviceID int32) error {
	ret := _m.Called(ctx, deviceID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeviceModeByDeviceId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, deviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeleteDeviceModeByDeviceId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDeviceModeByDeviceId'
type MockStore_DeleteDeviceModeByDeviceId_Call struct {
	*mock.Call
}

// DeleteDeviceModeByDeviceId is a helper method to define mock.On call
//   - ctx context.Context
//   - deviceID int32
func (_e *MockStore_Expecter) DeleteDeviceModeByDeviceId(ctx interface{}, deviceID interface{}) *MockStore_DeleteDeviceModeByDeviceId_Call {
	return &MockStore_DeleteDeviceModeByDeviceId_Call{Call: _e.mock.On("DeleteDeviceModeByDeviceId", ctx, deviceID)}
}

func (_c *MockStore_DeleteDeviceModeByDeviceId_Call) Run(run func(ctx context.Context, deviceID int32)) *MockStore_DeleteDeviceModeByDeviceId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_DeleteDeviceModeByDeviceId_Call) Return(_a0 error) *MockStore_DeleteDeviceModeByDeviceId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_DeleteDeviceModeByDeviceId_Call) RunAndReturn(run func(context.Context, int32) error) *MockStore_DeleteDeviceModeByDeviceId_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEmployee provides a mock function with given fields: ctx, id
func (_m *MockStore) DeleteEmployee(ctx context.Context, id int32) (repository.Employee, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmployee")
	}

	var r0 repository.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (repository.Employee, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) repository.Employee); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.Employee)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_DeleteEmployee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEmployee'
type MockStore_DeleteEmployee_Call struct {
	*mock.Call
}

// DeleteEmployee is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockStore_Expecter) DeleteEmployee(ctx interface{}, id interface{}) *MockStore_DeleteEmployee_Call {
	return &MockStore_DeleteEmployee_Call{Call: _e.mock.On("DeleteEmployee", ctx, id)}
}

func (_c *MockStore_DeleteEmployee_Call) Run(run func(ctx context.Context, id int32)) *MockStore_DeleteEmployee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_DeleteEmployee_Call) Return(_a0 repository.Employee, _a1 error) *MockStore_DeleteEmployee_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_DeleteEmployee_Call) RunAndReturn(run func(context.Context, int32) (repository.Employee, error)) *MockStore_DeleteEmployee_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEmployeeOccupation provides a mock function with given fields: ctx, id
func (_m *MockStore) DeleteEmployeeOccupation(ctx context.Context, id int32) (repository.EmployeeOccupation, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmployeeOccupation")
	}

	var r0 repository.EmployeeOccupation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (repository.EmployeeOccupation, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) repository.EmployeeOccupation); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.EmployeeOccupation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_DeleteEmployeeOccupation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEmployeeOccupation'
type MockStore_DeleteEmployeeOccupation_Call struct {
	*mock.Call
}

// DeleteEmployeeOccupation is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockStore_Expecter) DeleteEmployeeOccupation(ctx interface{}, id interface{}) *MockStore_DeleteEmployeeOccupation_Call {
	return &MockStore_DeleteEmployeeOccupation_Call{Call: _e.mock.On("DeleteEmployeeOccupation", ctx, id)}
}

func (_c *MockStore_DeleteEmployeeOccupation_Call) Run(run func(ctx context.Context, id int32)) *MockStore_DeleteEmployeeOccupation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_DeleteEmployeeOccupation_Call) Return(_a0 repository.EmployeeOccupation, _a1 error) *MockStore_DeleteEmployeeOccupation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_DeleteEmployeeOccupation_Call) RunAndReturn(run func(context.Context, int32) (repository.EmployeeOccupation, error)) *MockStore_DeleteEmployeeOccupation_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEmployeePermission provides a mock function with given fields: ctx, id
func (_m *MockStore) DeleteEmployeePermission(ctx context.Context, id int32) (repository.EmployeePermission, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmployeePermission")
	}

	var r0 repository.EmployeePermission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (repository.EmployeePermission, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) repository.EmployeePermission); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.EmployeePermission)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_DeleteEmployeePermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEmployeePermission'
type MockStore_DeleteEmployeePermission_Call struct {
	*mock.Call
}

// DeleteEmployeePermission is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockStore_Expecter) DeleteEmployeePermission(ctx interface{}, id interface{}) *MockStore_DeleteEmployeePermission_Call {
	return &MockStore_DeleteEmployeePermission_Call{Call: _e.mock.On("DeleteEmployeePermission", ctx, id)}
}

func (_c *MockStore_DeleteEmployeePermission_Call) Run(run func(ctx context.Context, id int32)) *MockStore_DeleteEmployeePermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_DeleteEmployeePermission_Call) Return(_a0 repository.EmployeePermission, _a1 error) *MockStore_DeleteEmployeePermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_DeleteEmployeePermission_Call) RunAndReturn(run func(context.Context, int32) (repository.EmployeePermission, error)) *MockStore_DeleteEmployeePermission_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEmployeePresence provides a mock function with given fields: ctx, id
func (_m *MockStore) DeleteEmployeePresence(ctx context.Context, id int32) (repository.EmployeePresence, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmployeePresence")
	}

	var r0 repository.EmployeePresence
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (repository.EmployeePresence, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) repository.EmployeePresence); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.EmployeePresence)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_DeleteEmployeePresence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEmployeePresence'
type MockStore_DeleteEmployeePresence_Call struct {
	*mock.Call
}

// DeleteEmployeePresence is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockStore_Expecter) DeleteEmployeePresence(ctx interface{}, id interface{}) *MockStore_DeleteEmployeePresence_Call {
	return &MockStore_DeleteEmployeePresence_Call{Call: _e.mock.On("DeleteEmployeePresence", ctx, id)}
}

func (_c *MockStore_DeleteEmployeePresence_Call) Run(run func(ctx context.Context, id int32)) *MockStore_DeleteEmployeePresence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_DeleteEmployeePresence_Call) Return(_a0 repository.EmployeePresence, _a1 error) *MockStore_DeleteEmployeePresence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_DeleteEmployeePresence_Call) RunAndReturn(run func(context.Context, int32) (repository.EmployeePresence, error)) *MockStore_DeleteEmployeePresence_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteParent provides a mock function with given fields: ctx, id
func (_m *MockStore) DeleteParent(ctx context.Context, id int32) (repository.Parent, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteParent")
	}

	var r0 repository.Parent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (repository.Parent, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) repository.Parent); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.Parent)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_DeleteParent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteParent'
type MockStore_DeleteParent_Call struct {
	*mock.Call
}

// DeleteParent is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockStore_Expecter) DeleteParent(ctx interface{}, id interface{}) *MockStore_DeleteParent_Call {
	return &MockStore_DeleteParent_Call{Call: _e.mock.On("DeleteParent", ctx, id)}
}

func (_c *MockStore_DeleteParent_Call) Run(run func(ctx context.Context, id int32)) *MockStore_DeleteParent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_DeleteParent_Call) Return(_a0 repository.Parent, _a1 error) *MockStore_DeleteParent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_DeleteParent_Call) RunAndReturn(run func(context.Context, int32) (repository.Parent, error)) *MockStore_DeleteParent_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSantri provides a mock function with given fields: ctx, id
func (_m *MockStore) DeleteSantri(ctx context.Context, id int32) (repository.Santri, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSantri")
	}

	var r0 repository.Santri
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (repository.Santri, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) repository.Santri); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.Santri)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_DeleteSantri_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSantri'
type MockStore_DeleteSantri_Call struct {
	*mock.Call
}

// DeleteSantri is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockStore_Expecter) DeleteSantri(ctx interface{}, id interface{}) *MockStore_DeleteSantri_Call {
	return &MockStore_DeleteSantri_Call{Call: _e.mock.On("DeleteSantri", ctx, id)}
}

func (_c *MockStore_DeleteSantri_Call) Run(run func(ctx context.Context, id int32)) *MockStore_DeleteSantri_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_DeleteSantri_Call) Return(_a0 repository.Santri, _a1 error) *MockStore_DeleteSantri_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_DeleteSantri_Call) RunAndReturn(run func(context.Context, int32) (repository.Santri, error)) *MockStore_DeleteSantri_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSantriOccupation provides a mock function with given fields: ctx, id
func (_m *MockStore) DeleteSantriOccupation(ctx context.Context, id int32) (repository.SantriOccupation, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSantriOccupation")
	}

	var r0 repository.SantriOccupation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (repository.SantriOccupation, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) repository.SantriOccupation); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.SantriOccupation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_DeleteSantriOccupation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSantriOccupation'
type MockStore_DeleteSantriOccupation_Call struct {
	*mock.Call
}

// DeleteSantriOccupation is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockStore_Expecter) DeleteSantriOccupation(ctx interface{}, id interface{}) *MockStore_DeleteSantriOccupation_Call {
	return &MockStore_DeleteSantriOccupation_Call{Call: _e.mock.On("DeleteSantriOccupation", ctx, id)}
}

func (_c *MockStore_DeleteSantriOccupation_Call) Run(run func(ctx context.Context, id int32)) *MockStore_DeleteSantriOccupation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_DeleteSantriOccupation_Call) Return(_a0 repository.SantriOccupation, _a1 error) *MockStore_DeleteSantriOccupation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_DeleteSantriOccupation_Call) RunAndReturn(run func(context.Context, int32) (repository.SantriOccupation, error)) *MockStore_DeleteSantriOccupation_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSantriPermission provides a mock function with given fields: ctx, id
func (_m *MockStore) DeleteSantriPermission(ctx context.Context, id int32) (repository.SantriPermission, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSantriPermission")
	}

	var r0 repository.SantriPermission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (repository.SantriPermission, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) repository.SantriPermission); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.SantriPermission)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_DeleteSantriPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSantriPermission'
type MockStore_DeleteSantriPermission_Call struct {
	*mock.Call
}

// DeleteSantriPermission is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockStore_Expecter) DeleteSantriPermission(ctx interface{}, id interface{}) *MockStore_DeleteSantriPermission_Call {
	return &MockStore_DeleteSantriPermission_Call{Call: _e.mock.On("DeleteSantriPermission", ctx, id)}
}

func (_c *MockStore_DeleteSantriPermission_Call) Run(run func(ctx context.Context, id int32)) *MockStore_DeleteSantriPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_DeleteSantriPermission_Call) Return(_a0 repository.SantriPermission, _a1 error) *MockStore_DeleteSantriPermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_DeleteSantriPermission_Call) RunAndReturn(run func(context.Context, int32) (repository.SantriPermission, error)) *MockStore_DeleteSantriPermission_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSantriPresence provides a mock function with given fields: ctx, id
func (_m *MockStore) DeleteSantriPresence(ctx context.Context, id int32) (repository.SantriPresence, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSantriPresence")
	}

	var r0 repository.SantriPresence
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (repository.SantriPresence, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) repository.SantriPresence); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.SantriPresence)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_DeleteSantriPresence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSantriPresence'
type MockStore_DeleteSantriPresence_Call struct {
	*mock.Call
}

// DeleteSantriPresence is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockStore_Expecter) DeleteSantriPresence(ctx interface{}, id interface{}) *MockStore_DeleteSantriPresence_Call {
	return &MockStore_DeleteSantriPresence_Call{Call: _e.mock.On("DeleteSantriPresence", ctx, id)}
}

func (_c *MockStore_DeleteSantriPresence_Call) Run(run func(ctx context.Context, id int32)) *MockStore_DeleteSantriPresence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_DeleteSantriPresence_Call) Return(_a0 repository.SantriPresence, _a1 error) *MockStore_DeleteSantriPresence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_DeleteSantriPresence_Call) RunAndReturn(run func(context.Context, int32) (repository.SantriPresence, error)) *MockStore_DeleteSantriPresence_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSmartCard provides a mock function with given fields: ctx, id
func (_m *MockStore) DeleteSmartCard(ctx context.Context, id int32) (repository.SmartCard, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSmartCard")
	}

	var r0 repository.SmartCard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (repository.SmartCard, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) repository.SmartCard); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.SmartCard)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_DeleteSmartCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSmartCard'
type MockStore_DeleteSmartCard_Call struct {
	*mock.Call
}

// DeleteSmartCard is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockStore_Expecter) DeleteSmartCard(ctx interface{}, id interface{}) *MockStore_DeleteSmartCard_Call {
	return &MockStore_DeleteSmartCard_Call{Call: _e.mock.On("DeleteSmartCard", ctx, id)}
}

func (_c *MockStore_DeleteSmartCard_Call) Run(run func(ctx context.Context, id int32)) *MockStore_DeleteSmartCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_DeleteSmartCard_Call) Return(_a0 repository.SmartCard, _a1 error) *MockStore_DeleteSmartCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_DeleteSmartCard_Call) RunAndReturn(run func(context.Context, int32) (repository.SmartCard, error)) *MockStore_DeleteSmartCard_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *MockStore) DeleteUser(ctx context.Context, id int32) (repository.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 repository.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (repository.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) repository.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockStore_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockStore_Expecter) DeleteUser(ctx interface{}, id interface{}) *MockStore_DeleteUser_Call {
	return &MockStore_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *MockStore_DeleteUser_Call) Run(run func(ctx context.Context, id int32)) *MockStore_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_DeleteUser_Call) Return(_a0 repository.User, _a1 error) *MockStore_DeleteUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_DeleteUser_Call) RunAndReturn(run func(context.Context, int32) (repository.User, error)) *MockStore_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetEmployeeByID provides a mock function with given fields: ctx, id
func (_m *MockStore) GetEmployeeByID(ctx context.Context, id int32) (repository.GetEmployeeByIDRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployeeByID")
	}

	var r0 repository.GetEmployeeByIDRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (repository.GetEmployeeByIDRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) repository.GetEmployeeByIDRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.GetEmployeeByIDRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetEmployeeByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEmployeeByID'
type MockStore_GetEmployeeByID_Call struct {
	*mock.Call
}

// GetEmployeeByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockStore_Expecter) GetEmployeeByID(ctx interface{}, id interface{}) *MockStore_GetEmployeeByID_Call {
	return &MockStore_GetEmployeeByID_Call{Call: _e.mock.On("GetEmployeeByID", ctx, id)}
}

func (_c *MockStore_GetEmployeeByID_Call) Run(run func(ctx context.Context, id int32)) *MockStore_GetEmployeeByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_GetEmployeeByID_Call) Return(_a0 repository.GetEmployeeByIDRow, _a1 error) *MockStore_GetEmployeeByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetEmployeeByID_Call) RunAndReturn(run func(context.Context, int32) (repository.GetEmployeeByIDRow, error)) *MockStore_GetEmployeeByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEmployeeByUserID provides a mock function with given fields: ctx, userID
func (_m *MockStore) GetEmployeeByUserID(ctx context.Context, userID pgtype.Int4) (repository.Employee, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployeeByUserID")
	}

	var r0 repository.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Int4) (repository.Employee, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Int4) repository.Employee); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(repository.Employee)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.Int4) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetEmployeeByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEmployeeByUserID'
type MockStore_GetEmployeeByUserID_Call struct {
	*mock.Call
}

// GetEmployeeByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID pgtype.Int4
func (_e *MockStore_Expecter) GetEmployeeByUserID(ctx interface{}, userID interface{}) *MockStore_GetEmployeeByUserID_Call {
	return &MockStore_GetEmployeeByUserID_Call{Call: _e.mock.On("GetEmployeeByUserID", ctx, userID)}
}

func (_c *MockStore_GetEmployeeByUserID_Call) Run(run func(ctx context.Context, userID pgtype.Int4)) *MockStore_GetEmployeeByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgtype.Int4))
	})
	return _c
}

func (_c *MockStore_GetEmployeeByUserID_Call) Return(_a0 repository.Employee, _a1 error) *MockStore_GetEmployeeByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetEmployeeByUserID_Call) RunAndReturn(run func(context.Context, pgtype.Int4) (repository.Employee, error)) *MockStore_GetEmployeeByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEmployeePermission provides a mock function with given fields: ctx, id
func (_m *MockStore) GetEmployeePermission(ctx context.Context, id int32) (repository.GetEmployeePermissionRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployeePermission")
	}

	var r0 repository.GetEmployeePermissionRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (repository.GetEmployeePermissionRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) repository.GetEmployeePermissionRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.GetEmployeePermissionRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetEmployeePermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEmployeePermission'
type MockStore_GetEmployeePermission_Call struct {
	*mock.Call
}

// GetEmployeePermission is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockStore_Expecter) GetEmployeePermission(ctx interface{}, id interface{}) *MockStore_GetEmployeePermission_Call {
	return &MockStore_GetEmployeePermission_Call{Call: _e.mock.On("GetEmployeePermission", ctx, id)}
}

func (_c *MockStore_GetEmployeePermission_Call) Run(run func(ctx context.Context, id int32)) *MockStore_GetEmployeePermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_GetEmployeePermission_Call) Return(_a0 repository.GetEmployeePermissionRow, _a1 error) *MockStore_GetEmployeePermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetEmployeePermission_Call) RunAndReturn(run func(context.Context, int32) (repository.GetEmployeePermissionRow, error)) *MockStore_GetEmployeePermission_Call {
	_c.Call.Return(run)
	return _c
}

// GetParent provides a mock function with given fields: ctx, id
func (_m *MockStore) GetParent(ctx context.Context, id int32) (repository.GetParentRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetParent")
	}

	var r0 repository.GetParentRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (repository.GetParentRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) repository.GetParentRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.GetParentRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetParent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParent'
type MockStore_GetParent_Call struct {
	*mock.Call
}

// GetParent is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockStore_Expecter) GetParent(ctx interface{}, id interface{}) *MockStore_GetParent_Call {
	return &MockStore_GetParent_Call{Call: _e.mock.On("GetParent", ctx, id)}
}

func (_c *MockStore_GetParent_Call) Run(run func(ctx context.Context, id int32)) *MockStore_GetParent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_GetParent_Call) Return(_a0 repository.GetParentRow, _a1 error) *MockStore_GetParent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetParent_Call) RunAndReturn(run func(context.Context, int32) (repository.GetParentRow, error)) *MockStore_GetParent_Call {
	_c.Call.Return(run)
	return _c
}

// GetParentByUserId provides a mock function with given fields: ctx, userID
func (_m *MockStore) GetParentByUserId(ctx context.Context, userID pgtype.Int4) (repository.Parent, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetParentByUserId")
	}

	var r0 repository.Parent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Int4) (repository.Parent, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Int4) repository.Parent); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(repository.Parent)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.Int4) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetParentByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParentByUserId'
type MockStore_GetParentByUserId_Call struct {
	*mock.Call
}

// GetParentByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - userID pgtype.Int4
func (_e *MockStore_Expecter) GetParentByUserId(ctx interface{}, userID interface{}) *MockStore_GetParentByUserId_Call {
	return &MockStore_GetParentByUserId_Call{Call: _e.mock.On("GetParentByUserId", ctx, userID)}
}

func (_c *MockStore_GetParentByUserId_Call) Run(run func(ctx context.Context, userID pgtype.Int4)) *MockStore_GetParentByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgtype.Int4))
	})
	return _c
}

func (_c *MockStore_GetParentByUserId_Call) Return(_a0 repository.Parent, _a1 error) *MockStore_GetParentByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetParentByUserId_Call) RunAndReturn(run func(context.Context, pgtype.Int4) (repository.Parent, error)) *MockStore_GetParentByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// GetSantri provides a mock function with given fields: ctx, id
func (_m *MockStore) GetSantri(ctx context.Context, id int32) (repository.GetSantriRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSantri")
	}

	var r0 repository.GetSantriRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (repository.GetSantriRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) repository.GetSantriRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.GetSantriRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetSantri_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSantri'
type MockStore_GetSantri_Call struct {
	*mock.Call
}

// GetSantri is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockStore_Expecter) GetSantri(ctx interface{}, id interface{}) *MockStore_GetSantri_Call {
	return &MockStore_GetSantri_Call{Call: _e.mock.On("GetSantri", ctx, id)}
}

func (_c *MockStore_GetSantri_Call) Run(run func(ctx context.Context, id int32)) *MockStore_GetSantri_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_GetSantri_Call) Return(_a0 repository.GetSantriRow, _a1 error) *MockStore_GetSantri_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetSantri_Call) RunAndReturn(run func(context.Context, int32) (repository.GetSantriRow, error)) *MockStore_GetSantri_Call {
	_c.Call.Return(run)
	return _c
}

// GetSantriPermission provides a mock function with given fields: ctx, id
func (_m *MockStore) GetSantriPermission(ctx context.Context, id int32) (repository.GetSantriPermissionRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSantriPermission")
	}

	var r0 repository.GetSantriPermissionRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (repository.GetSantriPermissionRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) repository.GetSantriPermissionRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.GetSantriPermissionRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetSantriPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSantriPermission'
type MockStore_GetSantriPermission_Call struct {
	*mock.Call
}

// GetSantriPermission is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockStore_Expecter) GetSantriPermission(ctx interface{}, id interface{}) *MockStore_GetSantriPermission_Call {
	return &MockStore_GetSantriPermission_Call{Call: _e.mock.On("GetSantriPermission", ctx, id)}
}

func (_c *MockStore_GetSantriPermission_Call) Run(run func(ctx context.Context, id int32)) *MockStore_GetSantriPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_GetSantriPermission_Call) Return(_a0 repository.GetSantriPermissionRow, _a1 error) *MockStore_GetSantriPermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetSantriPermission_Call) RunAndReturn(run func(context.Context, int32) (repository.GetSantriPermissionRow, error)) *MockStore_GetSantriPermission_Call {
	_c.Call.Return(run)
	return _c
}

// GetSmartCard provides a mock function with given fields: ctx, uid
func (_m *MockStore) GetSmartCard(ctx context.Context, uid string) (repository.GetSmartCardRow, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetSmartCard")
	}

	var r0 repository.GetSmartCardRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (repository.GetSmartCardRow, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) repository.GetSmartCardRow); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Get(0).(repository.GetSmartCardRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetSmartCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSmartCard'
type MockStore_GetSmartCard_Call struct {
	*mock.Call
}

// GetSmartCard is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
func (_e *MockStore_Expecter) GetSmartCard(ctx interface{}, uid interface{}) *MockStore_GetSmartCard_Call {
	return &MockStore_GetSmartCard_Call{Call: _e.mock.On("GetSmartCard", ctx, uid)}
}

func (_c *MockStore_GetSmartCard_Call) Run(run func(ctx context.Context, uid string)) *MockStore_GetSmartCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_GetSmartCard_Call) Return(_a0 repository.GetSmartCardRow, _a1 error) *MockStore_GetSmartCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetSmartCard_Call) RunAndReturn(run func(context.Context, string) (repository.GetSmartCardRow, error)) *MockStore_GetSmartCard_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockStore) GetUserByEmail(ctx context.Context, email pgtype.Text) (repository.GetUserByEmailRow, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 repository.GetUserByEmailRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Text) (repository.GetUserByEmailRow, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Text) repository.GetUserByEmailRow); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(repository.GetUserByEmailRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.Text) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockStore_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email pgtype.Text
func (_e *MockStore_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockStore_GetUserByEmail_Call {
	return &MockStore_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockStore_GetUserByEmail_Call) Run(run func(ctx context.Context, email pgtype.Text)) *MockStore_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgtype.Text))
	})
	return _c
}

func (_c *MockStore_GetUserByEmail_Call) Return(_a0 repository.GetUserByEmailRow, _a1 error) *MockStore_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetUserByEmail_Call) RunAndReturn(run func(context.Context, pgtype.Text) (repository.GetUserByEmailRow, error)) *MockStore_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function with given fields: ctx, id
func (_m *MockStore) GetUserById(ctx context.Context, id pgtype.Int4) (repository.GetUserByIdRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 repository.GetUserByIdRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Int4) (repository.GetUserByIdRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Int4) repository.GetUserByIdRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.GetUserByIdRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.Int4) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type MockStore_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - ctx context.Context
//   - id pgtype.Int4
func (_e *MockStore_Expecter) GetUserById(ctx interface{}, id interface{}) *MockStore_GetUserById_Call {
	return &MockStore_GetUserById_Call{Call: _e.mock.On("GetUserById", ctx, id)}
}

func (_c *MockStore_GetUserById_Call) Run(run func(ctx context.Context, id pgtype.Int4)) *MockStore_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgtype.Int4))
	})
	return _c
}

func (_c *MockStore_GetUserById_Call) Return(_a0 repository.GetUserByIdRow, _a1 error) *MockStore_GetUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetUserById_Call) RunAndReturn(run func(context.Context, pgtype.Int4) (repository.GetUserByIdRow, error)) *MockStore_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *MockStore) GetUserByUsername(ctx context.Context, username pgtype.Text) (repository.GetUserByUsernameRow, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 repository.GetUserByUsernameRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Text) (repository.GetUserByUsernameRow, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Text) repository.GetUserByUsernameRow); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(repository.GetUserByUsernameRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.Text) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockStore_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username pgtype.Text
func (_e *MockStore_Expecter) GetUserByUsername(ctx interface{}, username interface{}) *MockStore_GetUserByUsername_Call {
	return &MockStore_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", ctx, username)}
}

func (_c *MockStore_GetUserByUsername_Call) Run(run func(ctx context.Context, username pgtype.Text)) *MockStore_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgtype.Text))
	})
	return _c
}

func (_c *MockStore_GetUserByUsername_Call) Return(_a0 repository.GetUserByUsernameRow, _a1 error) *MockStore_GetUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetUserByUsername_Call) RunAndReturn(run func(context.Context, pgtype.Text) (repository.GetUserByUsernameRow, error)) *MockStore_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// ListDeviceModes provides a mock function with given fields: ctx, deviceID
func (_m *MockStore) ListDeviceModes(ctx context.Context, deviceID int32) ([]repository.DeviceMode, error) {
	ret := _m.Called(ctx, deviceID)

	if len(ret) == 0 {
		panic("no return value specified for ListDeviceModes")
	}

	var r0 []repository.DeviceMode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]repository.DeviceMode, error)); ok {
		return rf(ctx, deviceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []repository.DeviceMode); ok {
		r0 = rf(ctx, deviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.DeviceMode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListDeviceModes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDeviceModes'
type MockStore_ListDeviceModes_Call struct {
	*mock.Call
}

// ListDeviceModes is a helper method to define mock.On call
//   - ctx context.Context
//   - deviceID int32
func (_e *MockStore_Expecter) ListDeviceModes(ctx interface{}, deviceID interface{}) *MockStore_ListDeviceModes_Call {
	return &MockStore_ListDeviceModes_Call{Call: _e.mock.On("ListDeviceModes", ctx, deviceID)}
}

func (_c *MockStore_ListDeviceModes_Call) Run(run func(ctx context.Context, deviceID int32)) *MockStore_ListDeviceModes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_ListDeviceModes_Call) Return(_a0 []repository.DeviceMode, _a1 error) *MockStore_ListDeviceModes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListDeviceModes_Call) RunAndReturn(run func(context.Context, int32) ([]repository.DeviceMode, error)) *MockStore_ListDeviceModes_Call {
	_c.Call.Return(run)
	return _c
}

// ListDevices provides a mock function with given fields: ctx
func (_m *MockStore) ListDevices(ctx context.Context) ([]repository.ListDevicesRow, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListDevices")
	}

	var r0 []repository.ListDevicesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]repository.ListDevicesRow, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []repository.ListDevicesRow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ListDevicesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListDevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDevices'
type MockStore_ListDevices_Call struct {
	*mock.Call
}

// ListDevices is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStore_Expecter) ListDevices(ctx interface{}) *MockStore_ListDevices_Call {
	return &MockStore_ListDevices_Call{Call: _e.mock.On("ListDevices", ctx)}
}

func (_c *MockStore_ListDevices_Call) Run(run func(ctx context.Context)) *MockStore_ListDevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStore_ListDevices_Call) Return(_a0 []repository.ListDevicesRow, _a1 error) *MockStore_ListDevices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListDevices_Call) RunAndReturn(run func(context.Context) ([]repository.ListDevicesRow, error)) *MockStore_ListDevices_Call {
	_c.Call.Return(run)
	return _c
}

// ListEmployeeOccupations provides a mock function with given fields: ctx
func (_m *MockStore) ListEmployeeOccupations(ctx context.Context) ([]repository.ListEmployeeOccupationsRow, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListEmployeeOccupations")
	}

	var r0 []repository.ListEmployeeOccupationsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]repository.ListEmployeeOccupationsRow, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []repository.ListEmployeeOccupationsRow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ListEmployeeOccupationsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListEmployeeOccupations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEmployeeOccupations'
type MockStore_ListEmployeeOccupations_Call struct {
	*mock.Call
}

// ListEmployeeOccupations is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStore_Expecter) ListEmployeeOccupations(ctx interface{}) *MockStore_ListEmployeeOccupations_Call {
	return &MockStore_ListEmployeeOccupations_Call{Call: _e.mock.On("ListEmployeeOccupations", ctx)}
}

func (_c *MockStore_ListEmployeeOccupations_Call) Run(run func(ctx context.Context)) *MockStore_ListEmployeeOccupations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStore_ListEmployeeOccupations_Call) Return(_a0 []repository.ListEmployeeOccupationsRow, _a1 error) *MockStore_ListEmployeeOccupations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListEmployeeOccupations_Call) RunAndReturn(run func(context.Context) ([]repository.ListEmployeeOccupationsRow, error)) *MockStore_ListEmployeeOccupations_Call {
	_c.Call.Return(run)
	return _c
}

// ListEmployeePermissions provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListEmployeePermissions(ctx context.Context, arg repository.ListEmployeePermissionsParams) ([]repository.ListEmployeePermissionsRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListEmployeePermissions")
	}

	var r0 []repository.ListEmployeePermissionsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListEmployeePermissionsParams) ([]repository.ListEmployeePermissionsRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListEmployeePermissionsParams) []repository.ListEmployeePermissionsRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ListEmployeePermissionsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.ListEmployeePermissionsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListEmployeePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEmployeePermissions'
type MockStore_ListEmployeePermissions_Call struct {
	*mock.Call
}

// ListEmployeePermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.ListEmployeePermissionsParams
func (_e *MockStore_Expecter) ListEmployeePermissions(ctx interface{}, arg interface{}) *MockStore_ListEmployeePermissions_Call {
	return &MockStore_ListEmployeePermissions_Call{Call: _e.mock.On("ListEmployeePermissions", ctx, arg)}
}

func (_c *MockStore_ListEmployeePermissions_Call) Run(run func(ctx context.Context, arg repository.ListEmployeePermissionsParams)) *MockStore_ListEmployeePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.ListEmployeePermissionsParams))
	})
	return _c
}

func (_c *MockStore_ListEmployeePermissions_Call) Return(_a0 []repository.ListEmployeePermissionsRow, _a1 error) *MockStore_ListEmployeePermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListEmployeePermissions_Call) RunAndReturn(run func(context.Context, repository.ListEmployeePermissionsParams) ([]repository.ListEmployeePermissionsRow, error)) *MockStore_ListEmployeePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// ListEmployeePresences provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListEmployeePresences(ctx context.Context, arg repository.ListEmployeePresencesParams) ([]repository.ListEmployeePresencesRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListEmployeePresences")
	}

	var r0 []repository.ListEmployeePresencesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListEmployeePresencesParams) ([]repository.ListEmployeePresencesRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListEmployeePresencesParams) []repository.ListEmployeePresencesRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ListEmployeePresencesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.ListEmployeePresencesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListEmployeePresences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEmployeePresences'
type MockStore_ListEmployeePresences_Call struct {
	*mock.Call
}

// ListEmployeePresences is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.ListEmployeePresencesParams
func (_e *MockStore_Expecter) ListEmployeePresences(ctx interface{}, arg interface{}) *MockStore_ListEmployeePresences_Call {
	return &MockStore_ListEmployeePresences_Call{Call: _e.mock.On("ListEmployeePresences", ctx, arg)}
}

func (_c *MockStore_ListEmployeePresences_Call) Run(run func(ctx context.Context, arg repository.ListEmployeePresencesParams)) *MockStore_ListEmployeePresences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.ListEmployeePresencesParams))
	})
	return _c
}

func (_c *MockStore_ListEmployeePresences_Call) Return(_a0 []repository.ListEmployeePresencesRow, _a1 error) *MockStore_ListEmployeePresences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListEmployeePresences_Call) RunAndReturn(run func(context.Context, repository.ListEmployeePresencesParams) ([]repository.ListEmployeePresencesRow, error)) *MockStore_ListEmployeePresences_Call {
	_c.Call.Return(run)
	return _c
}

// ListEmployees provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListEmployees(ctx context.Context, arg repository.ListEmployeesParams) ([]repository.ListEmployeesRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListEmployees")
	}

	var r0 []repository.ListEmployeesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListEmployeesParams) ([]repository.ListEmployeesRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListEmployeesParams) []repository.ListEmployeesRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ListEmployeesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.ListEmployeesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListEmployees_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEmployees'
type MockStore_ListEmployees_Call struct {
	*mock.Call
}

// ListEmployees is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.ListEmployeesParams
func (_e *MockStore_Expecter) ListEmployees(ctx interface{}, arg interface{}) *MockStore_ListEmployees_Call {
	return &MockStore_ListEmployees_Call{Call: _e.mock.On("ListEmployees", ctx, arg)}
}

func (_c *MockStore_ListEmployees_Call) Run(run func(ctx context.Context, arg repository.ListEmployeesParams)) *MockStore_ListEmployees_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.ListEmployeesParams))
	})
	return _c
}

func (_c *MockStore_ListEmployees_Call) Return(_a0 []repository.ListEmployeesRow, _a1 error) *MockStore_ListEmployees_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListEmployees_Call) RunAndReturn(run func(context.Context, repository.ListEmployeesParams) ([]repository.ListEmployeesRow, error)) *MockStore_ListEmployees_Call {
	_c.Call.Return(run)
	return _c
}

// ListMissingEmployeePresences provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListMissingEmployeePresences(ctx context.Context, arg repository.ListMissingEmployeePresencesParams) ([]repository.ListMissingEmployeePresencesRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListMissingEmployeePresences")
	}

	var r0 []repository.ListMissingEmployeePresencesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListMissingEmployeePresencesParams) ([]repository.ListMissingEmployeePresencesRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListMissingEmployeePresencesParams) []repository.ListMissingEmployeePresencesRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ListMissingEmployeePresencesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.ListMissingEmployeePresencesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListMissingEmployeePresences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMissingEmployeePresences'
type MockStore_ListMissingEmployeePresences_Call struct {
	*mock.Call
}

// ListMissingEmployeePresences is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.ListMissingEmployeePresencesParams
func (_e *MockStore_Expecter) ListMissingEmployeePresences(ctx interface{}, arg interface{}) *MockStore_ListMissingEmployeePresences_Call {
	return &MockStore_ListMissingEmployeePresences_Call{Call: _e.mock.On("ListMissingEmployeePresences", ctx, arg)}
}

func (_c *MockStore_ListMissingEmployeePresences_Call) Run(run func(ctx context.Context, arg repository.ListMissingEmployeePresencesParams)) *MockStore_ListMissingEmployeePresences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.ListMissingEmployeePresencesParams))
	})
	return _c
}

func (_c *MockStore_ListMissingEmployeePresences_Call) Return(_a0 []repository.ListMissingEmployeePresencesRow, _a1 error) *MockStore_ListMissingEmployeePresences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListMissingEmployeePresences_Call) RunAndReturn(run func(context.Context, repository.ListMissingEmployeePresencesParams) ([]repository.ListMissingEmployeePresencesRow, error)) *MockStore_ListMissingEmployeePresences_Call {
	_c.Call.Return(run)
	return _c
}

// ListMissingSantriPresences provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListMissingSantriPresences(ctx context.Context, arg repository.ListMissingSantriPresencesParams) ([]repository.ListMissingSantriPresencesRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListMissingSantriPresences")
	}

	var r0 []repository.ListMissingSantriPresencesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListMissingSantriPresencesParams) ([]repository.ListMissingSantriPresencesRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListMissingSantriPresencesParams) []repository.ListMissingSantriPresencesRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ListMissingSantriPresencesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.ListMissingSantriPresencesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListMissingSantriPresences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMissingSantriPresences'
type MockStore_ListMissingSantriPresences_Call struct {
	*mock.Call
}

// ListMissingSantriPresences is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.ListMissingSantriPresencesParams
func (_e *MockStore_Expecter) ListMissingSantriPresences(ctx interface{}, arg interface{}) *MockStore_ListMissingSantriPresences_Call {
	return &MockStore_ListMissingSantriPresences_Call{Call: _e.mock.On("ListMissingSantriPresences", ctx, arg)}
}

func (_c *MockStore_ListMissingSantriPresences_Call) Run(run func(ctx context.Context, arg repository.ListMissingSantriPresencesParams)) *MockStore_ListMissingSantriPresences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.ListMissingSantriPresencesParams))
	})
	return _c
}

func (_c *MockStore_ListMissingSantriPresences_Call) Return(_a0 []repository.ListMissingSantriPresencesRow, _a1 error) *MockStore_ListMissingSantriPresences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListMissingSantriPresences_Call) RunAndReturn(run func(context.Context, repository.ListMissingSantriPresencesParams) ([]repository.ListMissingSantriPresencesRow, error)) *MockStore_ListMissingSantriPresences_Call {
	_c.Call.Return(run)
	return _c
}

// ListParents provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListParents(ctx context.Context, arg repository.ListParentParams) ([]repository.ListParentRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListParents")
	}

	var r0 []repository.ListParentRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListParentParams) ([]repository.ListParentRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListParentParams) []repository.ListParentRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ListParentRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.ListParentParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListParents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListParents'
type MockStore_ListParents_Call struct {
	*mock.Call
}

// ListParents is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.ListParentParams
func (_e *MockStore_Expecter) ListParents(ctx interface{}, arg interface{}) *MockStore_ListParents_Call {
	return &MockStore_ListParents_Call{Call: _e.mock.On("ListParents", ctx, arg)}
}

func (_c *MockStore_ListParents_Call) Run(run func(ctx context.Context, arg repository.ListParentParams)) *MockStore_ListParents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.ListParentParams))
	})
	return _c
}

func (_c *MockStore_ListParents_Call) Return(_a0 []repository.ListParentRow, _a1 error) *MockStore_ListParents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListParents_Call) RunAndReturn(run func(context.Context, repository.ListParentParams) ([]repository.ListParentRow, error)) *MockStore_ListParents_Call {
	_c.Call.Return(run)
	return _c
}

// ListSantri provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListSantri(ctx context.Context, arg repository.ListSantriParams) ([]repository.ListSantriRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListSantri")
	}

	var r0 []repository.ListSantriRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListSantriParams) ([]repository.ListSantriRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListSantriParams) []repository.ListSantriRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ListSantriRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.ListSantriParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListSantri_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSantri'
type MockStore_ListSantri_Call struct {
	*mock.Call
}

// ListSantri is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.ListSantriParams
func (_e *MockStore_Expecter) ListSantri(ctx interface{}, arg interface{}) *MockStore_ListSantri_Call {
	return &MockStore_ListSantri_Call{Call: _e.mock.On("ListSantri", ctx, arg)}
}

func (_c *MockStore_ListSantri_Call) Run(run func(ctx context.Context, arg repository.ListSantriParams)) *MockStore_ListSantri_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.ListSantriParams))
	})
	return _c
}

func (_c *MockStore_ListSantri_Call) Return(_a0 []repository.ListSantriRow, _a1 error) *MockStore_ListSantri_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListSantri_Call) RunAndReturn(run func(context.Context, repository.ListSantriParams) ([]repository.ListSantriRow, error)) *MockStore_ListSantri_Call {
	_c.Call.Return(run)
	return _c
}

// ListSantriOccupations provides a mock function with given fields: ctx
func (_m *MockStore) ListSantriOccupations(ctx context.Context) ([]repository.ListSantriOccupationsRow, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListSantriOccupations")
	}

	var r0 []repository.ListSantriOccupationsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]repository.ListSantriOccupationsRow, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []repository.ListSantriOccupationsRow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ListSantriOccupationsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListSantriOccupations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSantriOccupations'
type MockStore_ListSantriOccupations_Call struct {
	*mock.Call
}

// ListSantriOccupations is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStore_Expecter) ListSantriOccupations(ctx interface{}) *MockStore_ListSantriOccupations_Call {
	return &MockStore_ListSantriOccupations_Call{Call: _e.mock.On("ListSantriOccupations", ctx)}
}

func (_c *MockStore_ListSantriOccupations_Call) Run(run func(ctx context.Context)) *MockStore_ListSantriOccupations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStore_ListSantriOccupations_Call) Return(_a0 []repository.ListSantriOccupationsRow, _a1 error) *MockStore_ListSantriOccupations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListSantriOccupations_Call) RunAndReturn(run func(context.Context) ([]repository.ListSantriOccupationsRow, error)) *MockStore_ListSantriOccupations_Call {
	_c.Call.Return(run)
	return _c
}

// ListSantriPermissions provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListSantriPermissions(ctx context.Context, arg repository.ListSantriPermissionsParams) ([]repository.ListSantriPermissionsRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListSantriPermissions")
	}

	var r0 []repository.ListSantriPermissionsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListSantriPermissionsParams) ([]repository.ListSantriPermissionsRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListSantriPermissionsParams) []repository.ListSantriPermissionsRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ListSantriPermissionsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.ListSantriPermissionsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListSantriPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSantriPermissions'
type MockStore_ListSantriPermissions_Call struct {
	*mock.Call
}

// ListSantriPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.ListSantriPermissionsParams
func (_e *MockStore_Expecter) ListSantriPermissions(ctx interface{}, arg interface{}) *MockStore_ListSantriPermissions_Call {
	return &MockStore_ListSantriPermissions_Call{Call: _e.mock.On("ListSantriPermissions", ctx, arg)}
}

func (_c *MockStore_ListSantriPermissions_Call) Run(run func(ctx context.Context, arg repository.ListSantriPermissionsParams)) *MockStore_ListSantriPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.ListSantriPermissionsParams))
	})
	return _c
}

func (_c *MockStore_ListSantriPermissions_Call) Return(_a0 []repository.ListSantriPermissionsRow, _a1 error) *MockStore_ListSantriPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListSantriPermissions_Call) RunAndReturn(run func(context.Context, repository.ListSantriPermissionsParams) ([]repository.ListSantriPermissionsRow, error)) *MockStore_ListSantriPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// ListSantriPresences provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListSantriPresences(ctx context.Context, arg repository.ListSantriPresencesParams) ([]repository.ListSantriPresencesRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListSantriPresences")
	}

	var r0 []repository.ListSantriPresencesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListSantriPresencesParams) ([]repository.ListSantriPresencesRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListSantriPresencesParams) []repository.ListSantriPresencesRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ListSantriPresencesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.ListSantriPresencesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListSantriPresences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSantriPresences'
type MockStore_ListSantriPresences_Call struct {
	*mock.Call
}

// ListSantriPresences is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.ListSantriPresencesParams
func (_e *MockStore_Expecter) ListSantriPresences(ctx interface{}, arg interface{}) *MockStore_ListSantriPresences_Call {
	return &MockStore_ListSantriPresences_Call{Call: _e.mock.On("ListSantriPresences", ctx, arg)}
}

func (_c *MockStore_ListSantriPresences_Call) Run(run func(ctx context.Context, arg repository.ListSantriPresencesParams)) *MockStore_ListSantriPresences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.ListSantriPresencesParams))
	})
	return _c
}

func (_c *MockStore_ListSantriPresences_Call) Return(_a0 []repository.ListSantriPresencesRow, _a1 error) *MockStore_ListSantriPresences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListSantriPresences_Call) RunAndReturn(run func(context.Context, repository.ListSantriPresencesParams) ([]repository.ListSantriPresencesRow, error)) *MockStore_ListSantriPresences_Call {
	_c.Call.Return(run)
	return _c
}

// ListSmartCards provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListSmartCards(ctx context.Context, arg repository.ListSmartCardsParams) ([]repository.ListSmartCardsRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListSmartCards")
	}

	var r0 []repository.ListSmartCardsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListSmartCardsParams) ([]repository.ListSmartCardsRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListSmartCardsParams) []repository.ListSmartCardsRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ListSmartCardsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.ListSmartCardsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListSmartCards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSmartCards'
type MockStore_ListSmartCards_Call struct {
	*mock.Call
}

// ListSmartCards is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.ListSmartCardsParams
func (_e *MockStore_Expecter) ListSmartCards(ctx interface{}, arg interface{}) *MockStore_ListSmartCards_Call {
	return &MockStore_ListSmartCards_Call{Call: _e.mock.On("ListSmartCards", ctx, arg)}
}

func (_c *MockStore_ListSmartCards_Call) Run(run func(ctx context.Context, arg repository.ListSmartCardsParams)) *MockStore_ListSmartCards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.ListSmartCardsParams))
	})
	return _c
}

func (_c *MockStore_ListSmartCards_Call) Return(_a0 []repository.ListSmartCardsRow, _a1 error) *MockStore_ListSmartCards_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListSmartCards_Call) RunAndReturn(run func(context.Context, repository.ListSmartCardsParams) ([]repository.ListSmartCardsRow, error)) *MockStore_ListSmartCards_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListUsers(ctx context.Context, arg repository.ListUserParams) ([]repository.ListUserRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []repository.ListUserRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListUserParams) ([]repository.ListUserRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListUserParams) []repository.ListUserRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ListUserRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.ListUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockStore_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.ListUserParams
func (_e *MockStore_Expecter) ListUsers(ctx interface{}, arg interface{}) *MockStore_ListUsers_Call {
	return &MockStore_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx, arg)}
}

func (_c *MockStore_ListUsers_Call) Run(run func(ctx context.Context, arg repository.ListUserParams)) *MockStore_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.ListUserParams))
	})
	return _c
}

func (_c *MockStore_ListUsers_Call) Return(_a0 []repository.ListUserRow, _a1 error) *MockStore_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListUsers_Call) RunAndReturn(run func(context.Context, repository.ListUserParams) ([]repository.ListUserRow, error)) *MockStore_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDevice provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateDevice(ctx context.Context, arg repository.UpdateDeviceParams) (repository.Device, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDevice")
	}

	var r0 repository.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateDeviceParams) (repository.Device, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateDeviceParams) repository.Device); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.Device)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.UpdateDeviceParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDevice'
type MockStore_UpdateDevice_Call struct {
	*mock.Call
}

// UpdateDevice is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.UpdateDeviceParams
func (_e *MockStore_Expecter) UpdateDevice(ctx interface{}, arg interface{}) *MockStore_UpdateDevice_Call {
	return &MockStore_UpdateDevice_Call{Call: _e.mock.On("UpdateDevice", ctx, arg)}
}

func (_c *MockStore_UpdateDevice_Call) Run(run func(ctx context.Context, arg repository.UpdateDeviceParams)) *MockStore_UpdateDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.UpdateDeviceParams))
	})
	return _c
}

func (_c *MockStore_UpdateDevice_Call) Return(_a0 repository.Device, _a1 error) *MockStore_UpdateDevice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateDevice_Call) RunAndReturn(run func(context.Context, repository.UpdateDeviceParams) (repository.Device, error)) *MockStore_UpdateDevice_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDeviceMode provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateDeviceMode(ctx context.Context, arg repository.UpdateDeviceModeParams) (repository.DeviceMode, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeviceMode")
	}

	var r0 repository.DeviceMode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateDeviceModeParams) (repository.DeviceMode, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateDeviceModeParams) repository.DeviceMode); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.DeviceMode)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.UpdateDeviceModeParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateDeviceMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDeviceMode'
type MockStore_UpdateDeviceMode_Call struct {
	*mock.Call
}

// UpdateDeviceMode is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.UpdateDeviceModeParams
func (_e *MockStore_Expecter) UpdateDeviceMode(ctx interface{}, arg interface{}) *MockStore_UpdateDeviceMode_Call {
	return &MockStore_UpdateDeviceMode_Call{Call: _e.mock.On("UpdateDeviceMode", ctx, arg)}
}

func (_c *MockStore_UpdateDeviceMode_Call) Run(run func(ctx context.Context, arg repository.UpdateDeviceModeParams)) *MockStore_UpdateDeviceMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.UpdateDeviceModeParams))
	})
	return _c
}

func (_c *MockStore_UpdateDeviceMode_Call) Return(_a0 repository.DeviceMode, _a1 error) *MockStore_UpdateDeviceMode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateDeviceMode_Call) RunAndReturn(run func(context.Context, repository.UpdateDeviceModeParams) (repository.DeviceMode, error)) *MockStore_UpdateDeviceMode_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEmployee provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateEmployee(ctx context.Context, arg repository.UpdateEmployeeParams) (repository.Employee, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmployee")
	}

	var r0 repository.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateEmployeeParams) (repository.Employee, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateEmployeeParams) repository.Employee); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.Employee)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.UpdateEmployeeParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateEmployee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEmployee'
type MockStore_UpdateEmployee_Call struct {
	*mock.Call
}

// UpdateEmployee is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.UpdateEmployeeParams
func (_e *MockStore_Expecter) UpdateEmployee(ctx interface{}, arg interface{}) *MockStore_UpdateEmployee_Call {
	return &MockStore_UpdateEmployee_Call{Call: _e.mock.On("UpdateEmployee", ctx, arg)}
}

func (_c *MockStore_UpdateEmployee_Call) Run(run func(ctx context.Context, arg repository.UpdateEmployeeParams)) *MockStore_UpdateEmployee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.UpdateEmployeeParams))
	})
	return _c
}

func (_c *MockStore_UpdateEmployee_Call) Return(_a0 repository.Employee, _a1 error) *MockStore_UpdateEmployee_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateEmployee_Call) RunAndReturn(run func(context.Context, repository.UpdateEmployeeParams) (repository.Employee, error)) *MockStore_UpdateEmployee_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEmployeeOccupation provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateEmployeeOccupation(ctx context.Context, arg repository.UpdateEmployeeOccupationParams) (repository.EmployeeOccupation, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmployeeOccupation")
	}

	var r0 repository.EmployeeOccupation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateEmployeeOccupationParams) (repository.EmployeeOccupation, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateEmployeeOccupationParams) repository.EmployeeOccupation); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.EmployeeOccupation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.UpdateEmployeeOccupationParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateEmployeeOccupation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEmployeeOccupation'
type MockStore_UpdateEmployeeOccupation_Call struct {
	*mock.Call
}

// UpdateEmployeeOccupation is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.UpdateEmployeeOccupationParams
func (_e *MockStore_Expecter) UpdateEmployeeOccupation(ctx interface{}, arg interface{}) *MockStore_UpdateEmployeeOccupation_Call {
	return &MockStore_UpdateEmployeeOccupation_Call{Call: _e.mock.On("UpdateEmployeeOccupation", ctx, arg)}
}

func (_c *MockStore_UpdateEmployeeOccupation_Call) Run(run func(ctx context.Context, arg repository.UpdateEmployeeOccupationParams)) *MockStore_UpdateEmployeeOccupation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.UpdateEmployeeOccupationParams))
	})
	return _c
}

func (_c *MockStore_UpdateEmployeeOccupation_Call) Return(_a0 repository.EmployeeOccupation, _a1 error) *MockStore_UpdateEmployeeOccupation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateEmployeeOccupation_Call) RunAndReturn(run func(context.Context, repository.UpdateEmployeeOccupationParams) (repository.EmployeeOccupation, error)) *MockStore_UpdateEmployeeOccupation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEmployeePermission provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateEmployeePermission(ctx context.Context, arg repository.UpdateEmployeePermissionParams) (repository.EmployeePermission, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmployeePermission")
	}

	var r0 repository.EmployeePermission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateEmployeePermissionParams) (repository.EmployeePermission, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateEmployeePermissionParams) repository.EmployeePermission); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.EmployeePermission)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.UpdateEmployeePermissionParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateEmployeePermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEmployeePermission'
type MockStore_UpdateEmployeePermission_Call struct {
	*mock.Call
}

// UpdateEmployeePermission is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.UpdateEmployeePermissionParams
func (_e *MockStore_Expecter) UpdateEmployeePermission(ctx interface{}, arg interface{}) *MockStore_UpdateEmployeePermission_Call {
	return &MockStore_UpdateEmployeePermission_Call{Call: _e.mock.On("UpdateEmployeePermission", ctx, arg)}
}

func (_c *MockStore_UpdateEmployeePermission_Call) Run(run func(ctx context.Context, arg repository.UpdateEmployeePermissionParams)) *MockStore_UpdateEmployeePermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.UpdateEmployeePermissionParams))
	})
	return _c
}

func (_c *MockStore_UpdateEmployeePermission_Call) Return(_a0 repository.EmployeePermission, _a1 error) *MockStore_UpdateEmployeePermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateEmployeePermission_Call) RunAndReturn(run func(context.Context, repository.UpdateEmployeePermissionParams) (repository.EmployeePermission, error)) *MockStore_UpdateEmployeePermission_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEmployeePresence provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateEmployeePresence(ctx context.Context, arg repository.UpdateEmployeePresenceParams) (repository.EmployeePresence, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmployeePresence")
	}

	var r0 repository.EmployeePresence
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateEmployeePresenceParams) (repository.EmployeePresence, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateEmployeePresenceParams) repository.EmployeePresence); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.EmployeePresence)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.UpdateEmployeePresenceParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateEmployeePresence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEmployeePresence'
type MockStore_UpdateEmployeePresence_Call struct {
	*mock.Call
}

// UpdateEmployeePresence is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.UpdateEmployeePresenceParams
func (_e *MockStore_Expecter) UpdateEmployeePresence(ctx interface{}, arg interface{}) *MockStore_UpdateEmployeePresence_Call {
	return &MockStore_UpdateEmployeePresence_Call{Call: _e.mock.On("UpdateEmployeePresence", ctx, arg)}
}

func (_c *MockStore_UpdateEmployeePresence_Call) Run(run func(ctx context.Context, arg repository.UpdateEmployeePresenceParams)) *MockStore_UpdateEmployeePresence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.UpdateEmployeePresenceParams))
	})
	return _c
}

func (_c *MockStore_UpdateEmployeePresence_Call) Return(_a0 repository.EmployeePresence, _a1 error) *MockStore_UpdateEmployeePresence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateEmployeePresence_Call) RunAndReturn(run func(context.Context, repository.UpdateEmployeePresenceParams) (repository.EmployeePresence, error)) *MockStore_UpdateEmployeePresence_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateParent provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateParent(ctx context.Context, arg repository.UpdateParentParams) (repository.Parent, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateParent")
	}

	var r0 repository.Parent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateParentParams) (repository.Parent, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateParentParams) repository.Parent); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.Parent)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.UpdateParentParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateParent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateParent'
type MockStore_UpdateParent_Call struct {
	*mock.Call
}

// UpdateParent is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.UpdateParentParams
func (_e *MockStore_Expecter) UpdateParent(ctx interface{}, arg interface{}) *MockStore_UpdateParent_Call {
	return &MockStore_UpdateParent_Call{Call: _e.mock.On("UpdateParent", ctx, arg)}
}

func (_c *MockStore_UpdateParent_Call) Run(run func(ctx context.Context, arg repository.UpdateParentParams)) *MockStore_UpdateParent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.UpdateParentParams))
	})
	return _c
}

func (_c *MockStore_UpdateParent_Call) Return(_a0 repository.Parent, _a1 error) *MockStore_UpdateParent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateParent_Call) RunAndReturn(run func(context.Context, repository.UpdateParentParams) (repository.Parent, error)) *MockStore_UpdateParent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSantri provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateSantri(ctx context.Context, arg repository.UpdateSantriParams) (repository.Santri, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSantri")
	}

	var r0 repository.Santri
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateSantriParams) (repository.Santri, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateSantriParams) repository.Santri); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.Santri)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.UpdateSantriParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateSantri_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSantri'
type MockStore_UpdateSantri_Call struct {
	*mock.Call
}

// UpdateSantri is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.UpdateSantriParams
func (_e *MockStore_Expecter) UpdateSantri(ctx interface{}, arg interface{}) *MockStore_UpdateSantri_Call {
	return &MockStore_UpdateSantri_Call{Call: _e.mock.On("UpdateSantri", ctx, arg)}
}

func (_c *MockStore_UpdateSantri_Call) Run(run func(ctx context.Context, arg repository.UpdateSantriParams)) *MockStore_UpdateSantri_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.UpdateSantriParams))
	})
	return _c
}

func (_c *MockStore_UpdateSantri_Call) Return(_a0 repository.Santri, _a1 error) *MockStore_UpdateSantri_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateSantri_Call) RunAndReturn(run func(context.Context, repository.UpdateSantriParams) (repository.Santri, error)) *MockStore_UpdateSantri_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSantriOccupation provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateSantriOccupation(ctx context.Context, arg repository.UpdateSantriOccupationParams) (repository.SantriOccupation, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSantriOccupation")
	}

	var r0 repository.SantriOccupation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateSantriOccupationParams) (repository.SantriOccupation, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateSantriOccupationParams) repository.SantriOccupation); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.SantriOccupation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.UpdateSantriOccupationParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateSantriOccupation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSantriOccupation'
type MockStore_UpdateSantriOccupation_Call struct {
	*mock.Call
}

// UpdateSantriOccupation is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.UpdateSantriOccupationParams
func (_e *MockStore_Expecter) UpdateSantriOccupation(ctx interface{}, arg interface{}) *MockStore_UpdateSantriOccupation_Call {
	return &MockStore_UpdateSantriOccupation_Call{Call: _e.mock.On("UpdateSantriOccupation", ctx, arg)}
}

func (_c *MockStore_UpdateSantriOccupation_Call) Run(run func(ctx context.Context, arg repository.UpdateSantriOccupationParams)) *MockStore_UpdateSantriOccupation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.UpdateSantriOccupationParams))
	})
	return _c
}

func (_c *MockStore_UpdateSantriOccupation_Call) Return(_a0 repository.SantriOccupation, _a1 error) *MockStore_UpdateSantriOccupation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateSantriOccupation_Call) RunAndReturn(run func(context.Context, repository.UpdateSantriOccupationParams) (repository.SantriOccupation, error)) *MockStore_UpdateSantriOccupation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSantriPermission provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateSantriPermission(ctx context.Context, arg repository.UpdateSantriPermissionParams) (repository.SantriPermission, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSantriPermission")
	}

	var r0 repository.SantriPermission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateSantriPermissionParams) (repository.SantriPermission, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateSantriPermissionParams) repository.SantriPermission); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.SantriPermission)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.UpdateSantriPermissionParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateSantriPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSantriPermission'
type MockStore_UpdateSantriPermission_Call struct {
	*mock.Call
}

// UpdateSantriPermission is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.UpdateSantriPermissionParams
func (_e *MockStore_Expecter) UpdateSantriPermission(ctx interface{}, arg interface{}) *MockStore_UpdateSantriPermission_Call {
	return &MockStore_UpdateSantriPermission_Call{Call: _e.mock.On("UpdateSantriPermission", ctx, arg)}
}

func (_c *MockStore_UpdateSantriPermission_Call) Run(run func(ctx context.Context, arg repository.UpdateSantriPermissionParams)) *MockStore_UpdateSantriPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.UpdateSantriPermissionParams))
	})
	return _c
}

func (_c *MockStore_UpdateSantriPermission_Call) Return(_a0 repository.SantriPermission, _a1 error) *MockStore_UpdateSantriPermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateSantriPermission_Call) RunAndReturn(run func(context.Context, repository.UpdateSantriPermissionParams) (repository.SantriPermission, error)) *MockStore_UpdateSantriPermission_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSantriPresence provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateSantriPresence(ctx context.Context, arg repository.UpdateSantriPresenceParams) (repository.SantriPresence, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSantriPresence")
	}

	var r0 repository.SantriPresence
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateSantriPresenceParams) (repository.SantriPresence, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateSantriPresenceParams) repository.SantriPresence); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.SantriPresence)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.UpdateSantriPresenceParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateSantriPresence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSantriPresence'
type MockStore_UpdateSantriPresence_Call struct {
	*mock.Call
}

// UpdateSantriPresence is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.UpdateSantriPresenceParams
func (_e *MockStore_Expecter) UpdateSantriPresence(ctx interface{}, arg interface{}) *MockStore_UpdateSantriPresence_Call {
	return &MockStore_UpdateSantriPresence_Call{Call: _e.mock.On("UpdateSantriPresence", ctx, arg)}
}

func (_c *MockStore_UpdateSantriPresence_Call) Run(run func(ctx context.Context, arg repository.UpdateSantriPresenceParams)) *MockStore_UpdateSantriPresence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.UpdateSantriPresenceParams))
	})
	return _c
}

func (_c *MockStore_UpdateSantriPresence_Call) Return(_a0 repository.SantriPresence, _a1 error) *MockStore_UpdateSantriPresence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateSantriPresence_Call) RunAndReturn(run func(context.Context, repository.UpdateSantriPresenceParams) (repository.SantriPresence, error)) *MockStore_UpdateSantriPresence_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSmartCard provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateSmartCard(ctx context.Context, arg repository.UpdateSmartCardParams) (repository.SmartCard, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSmartCard")
	}

	var r0 repository.SmartCard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateSmartCardParams) (repository.SmartCard, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateSmartCardParams) repository.SmartCard); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.SmartCard)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.UpdateSmartCardParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateSmartCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSmartCard'
type MockStore_UpdateSmartCard_Call struct {
	*mock.Call
}

// UpdateSmartCard is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.UpdateSmartCardParams
func (_e *MockStore_Expecter) UpdateSmartCard(ctx interface{}, arg interface{}) *MockStore_UpdateSmartCard_Call {
	return &MockStore_UpdateSmartCard_Call{Call: _e.mock.On("UpdateSmartCard", ctx, arg)}
}

func (_c *MockStore_UpdateSmartCard_Call) Run(run func(ctx context.Context, arg repository.UpdateSmartCardParams)) *MockStore_UpdateSmartCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.UpdateSmartCardParams))
	})
	return _c
}

func (_c *MockStore_UpdateSmartCard_Call) Return(_a0 repository.SmartCard, _a1 error) *MockStore_UpdateSmartCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateSmartCard_Call) RunAndReturn(run func(context.Context, repository.UpdateSmartCardParams) (repository.SmartCard, error)) *MockStore_UpdateSmartCard_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateUser(ctx context.Context, arg repository.UpdateUserParams) (repository.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 repository.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateUserParams) (repository.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateUserParams) repository.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.UpdateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockStore_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.UpdateUserParams
func (_e *MockStore_Expecter) UpdateUser(ctx interface{}, arg interface{}) *MockStore_UpdateUser_Call {
	return &MockStore_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, arg)}
}

func (_c *MockStore_UpdateUser_Call) Run(run func(ctx context.Context, arg repository.UpdateUserParams)) *MockStore_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.UpdateUserParams))
	})
	return _c
}

func (_c *MockStore_UpdateUser_Call) Return(_a0 repository.User, _a1 error) *MockStore_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateUser_Call) RunAndReturn(run func(context.Context, repository.UpdateUserParams) (repository.User, error)) *MockStore_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
